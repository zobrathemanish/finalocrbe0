'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var SuperLogger = require('winston').Transport,
    RLS = require('../util/RequestLocalStorage').getNamespace();

// A subset of stats that are logged are not associated with requests
// or occur before the request context is initialized. Simply ignore
// those logs here.
var queue = function queue() {
	if (RLS.isActive()) {
		return RLS().queue || (RLS().queue = []);
	} else {
		return [];
	}
};

var pushToQueue = function pushToQueue(module, lastModuleToken, key, level, msg, meta) {
	if (RLS.isActive() && !!RLS().doLog) {
		var tuple = [module, msg, meta[key], lastModuleToken];
		queue().push(tuple);
	}
};

var ResponseLogger = function (_SuperLogger) {
	_inherits(ResponseLogger, _SuperLogger);

	function ResponseLogger(options) {
		_classCallCheck(this, ResponseLogger);

		var _this = _possibleConstructorReturn(this, (ResponseLogger.__proto__ || Object.getPrototypeOf(ResponseLogger)).call(this));

		_this.name = 'ResponseLogger';
		_this.level = options.level || 'debug';
		_this.module = options.name;
		_this.lastModuleToken = options.name.split('.').pop();
		return _this;
	}

	_createClass(ResponseLogger, [{
		key: 'log',
		value: function log(level, msg, meta, callback) {
			pushToQueue(this.module, this.lastModuleToken, this.key, level, msg, meta);
			// Yield to the next log transport.
			callback(null, true);
		}
	}]);

	return ResponseLogger;
}(SuperLogger);

var TimeResponseLogger = function (_ResponseLogger) {
	_inherits(TimeResponseLogger, _ResponseLogger);

	function TimeResponseLogger(options) {
		_classCallCheck(this, TimeResponseLogger);

		var _this2 = _possibleConstructorReturn(this, (TimeResponseLogger.__proto__ || Object.getPrototypeOf(TimeResponseLogger)).call(this, options));

		_this2.name = 'TimeResponseLogger';
		_this2.level = 'fast';
		_this2.key = 'ms';
		return _this2;
	}

	return TimeResponseLogger;
}(ResponseLogger);

var GaugeResponseLogger = function (_ResponseLogger2) {
	_inherits(GaugeResponseLogger, _ResponseLogger2);

	function GaugeResponseLogger(options) {
		_classCallCheck(this, GaugeResponseLogger);

		var _this3 = _possibleConstructorReturn(this, (GaugeResponseLogger.__proto__ || Object.getPrototypeOf(GaugeResponseLogger)).call(this, options));

		_this3.name = 'GaugeResponseLogger';
		_this3.level = 'ok';
		_this3.key = 'val';
		return _this3;
	}

	return GaugeResponseLogger;
}(ResponseLogger);

var getTransportForGroup = function getTransportForGroup(group, opts) {
	if (group === "time") {
		return new TimeResponseLogger(opts);
	} else if (group === "gauge") {
		return new GaugeResponseLogger(opts);
	} else {
		return new ResponseLogger(opts);
	}
};

var flushLogsToResponse = function flushLogsToResponse(res) {
	if (queue().length > 0) {
		res.write("<script>");
		res.write('window.reactServerLogs = ' + JSON.stringify(queue()) + ';\n');
		res.write("</script>");
	}
};

var setResponseLoggerPage = function setResponseLoggerPage(page) {
	if (RLS.isActive() && !!page) {
		RLS().doLog = page.getRequest().getQuery()._debug_output_logs;
	}
};
module.exports = { setResponseLoggerPage: setResponseLoggerPage, flushLogsToResponse: flushLogsToResponse, getTransportForGroup: getTransportForGroup, TimeResponseLogger: TimeResponseLogger, ResponseLogger: ResponseLogger };
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxvZ2dpbmcvcmVzcG9uc2UuanMiXSwibmFtZXMiOlsiU3VwZXJMb2dnZXIiLCJyZXF1aXJlIiwiVHJhbnNwb3J0IiwiUkxTIiwiZ2V0TmFtZXNwYWNlIiwicXVldWUiLCJpc0FjdGl2ZSIsInB1c2hUb1F1ZXVlIiwibW9kdWxlIiwibGFzdE1vZHVsZVRva2VuIiwia2V5IiwibGV2ZWwiLCJtc2ciLCJtZXRhIiwiZG9Mb2ciLCJ0dXBsZSIsInB1c2giLCJSZXNwb25zZUxvZ2dlciIsIm9wdGlvbnMiLCJuYW1lIiwic3BsaXQiLCJwb3AiLCJjYWxsYmFjayIsIlRpbWVSZXNwb25zZUxvZ2dlciIsIkdhdWdlUmVzcG9uc2VMb2dnZXIiLCJnZXRUcmFuc3BvcnRGb3JHcm91cCIsImdyb3VwIiwib3B0cyIsImZsdXNoTG9nc1RvUmVzcG9uc2UiLCJyZXMiLCJsZW5ndGgiLCJ3cml0ZSIsIkpTT04iLCJzdHJpbmdpZnkiLCJzZXRSZXNwb25zZUxvZ2dlclBhZ2UiLCJwYWdlIiwiZ2V0UmVxdWVzdCIsImdldFF1ZXJ5IiwiX2RlYnVnX291dHB1dF9sb2dzIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUFBLElBQUtBLGNBQWNDLFFBQVEsU0FBUixFQUFtQkMsU0FBdEM7QUFBQSxJQUNXQyxNQUFNRixRQUFRLDZCQUFSLEVBQXVDRyxZQUF2QyxFQURqQjs7QUFHQTtBQUNBO0FBQ0E7QUFDQSxJQUFJQyxRQUFRLFNBQVJBLEtBQVEsR0FBTTtBQUNqQixLQUFJRixJQUFJRyxRQUFKLEVBQUosRUFBb0I7QUFDbkIsU0FBT0gsTUFBTUUsS0FBTixLQUFnQkYsTUFBTUUsS0FBTixHQUFjLEVBQTlCLENBQVA7QUFDQSxFQUZELE1BR0s7QUFDSixTQUFPLEVBQVA7QUFDQTtBQUNELENBUEQ7O0FBU0EsSUFBSUUsY0FBYyxTQUFkQSxXQUFjLENBQUNDLE1BQUQsRUFBU0MsZUFBVCxFQUEwQkMsR0FBMUIsRUFBK0JDLEtBQS9CLEVBQXNDQyxHQUF0QyxFQUEy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dWlyZSgnd2luc3RvbicpLlRyYW5zcG9ydFxuLFx0ICAgICAgICAgUkxTID0gcmVxdWlyZSgnLi4vdXRpbC9SZXF1ZXN0TG9jYWxTdG9yYWdlJykuZ2V0TmFtZXNwYWNlKCk7XG5cbi8vIEEgc3Vic2V0IG9mIHN0YXRzIHRoYXQgYXJlIGxvZ2dlZCBhcmUgbm90IGFzc29jaWF0ZWQgd2l0aCByZXF1ZXN0c1xuLy8gb3Igb2NjdXIgYmVmb3JlIHRoZSByZXF1ZXN0IGNvbnRleHQgaXMgaW5pdGlhbGl6ZWQuIFNpbXBseSBpZ25vcmVcbi8vIHRob3NlIGxvZ3MgaGVyZS5cbnZhciBxdWV1ZSA9ICgpID0+IHtcblx0aWYgKFJMUy5pc0FjdGl2ZSgpKSB7XG5cdFx0cmV0dXJuIFJMUygpLnF1ZXVlIHx8IChSTFMoKS5xdWV1ZSA9IFtdKTtcblx0fVxuXHRlbHNlIHtcblx0XHRyZXR1cm4gW107XG5cdH1cbn1cblxudmFyIHB1c2hUb1F1ZXVlID0gKG1vZHVsZSwgbGFzdE1vZHVsZVRva2VuLCBrZXksIGxldmVsLCBtc2csIG1ldGEpID0+IHtcblx0aWYgKFJMUy5pc0FjdGl2ZSgpICYmICEhUkxTKCkuZG9Mb2cpIHtcblx0XHR2YXIgdHVwbGUgPSBbXG5cdFx0XHRtb2R1bGUsXG5cdFx0XHRtc2csXG5cdFx0XHRtZXRhW2tleV0sXG5cdFx0XHRsYXN0TW9kdWxlVG9rZW4sXG5cdFx0XTtcblx0XHRxdWV1ZSgpLnB1c2godHVwbGUpO1xuXHR9XG59XG5jbGFzcyBSZXNwb25zZUxvZ2dlciBleHRlbmRzIFN1cGVyTG9nZ2VyIHtcblx0Y29uc3RydWN0b3Iob3B0aW9ucykge1xuXHRcdHN1cGVyKCk7XG5cdFx0dGhpcy5uYW1lID0gJ1Jlc3BvbnNlTG9nZ2VyJztcblx0XHR0aGlzLmxldmVsID0gb3B0aW9ucy5sZXZlbCB8fCAnZGVidWcnO1xuXHRcdHRoaXMubW9kdWxlID0gb3B0aW9ucy5uYW1lO1xuXHRcdHRoaXMubGFzdE1vZHVsZVRva2VuICA9IG9wdGlvbnMubmFtZS5zcGxpdCgnLicpLnBvcCgpO1xuXHR9XG5cblx0bG9nKGxldmVsLCBtc2csIG1ldGEsIGNhbGxiYWNrKSB7XG5cdFx0cHVzaFRvUXVldWUodGhpcy5tb2R1bGUsIHRoaXMubGFzdE1vZHVsZVRva2VuLCB0aGlzLmtleSwgbGV2ZWwsIG1zZywgbWV0YSk7XG5cdFx0Ly8gWWllbGQgdG8gdGhlIG5leHQgbG9nIHRyYW5zcG9ydC5cblx0XHRjYWxsYmFjayhudWxsLCB0cnVlKTtcblx0fVxufVxuXG5jbGFzcyBUaW1lUmVzcG9uc2VMb2dnZXIgZXh0ZW5kcyBSZXNwb25zZUxvZ2dlciB7XG5cdGNvbnN0cnVjdG9yKG9wdGlvbnMpe1xuXHRcdHN1cGVyKG9wdGlvbnMpO1xuXHRcdHRoaXMubmFtZSA9ICdUaW1lUmVzcG9uc2VMb2dnZXInO1xuXHRcdHRoaXMubGV2ZWwgPSAnZmFzdCc7XG5cdFx0dGhpcy5rZXkgICA9ICdtcyc7XG5cdH1cbn1cblxuY2xhc3MgR2F1Z2VSZXNwb25zZUxvZ2dlciBleHRlbmRzIFJlc3BvbnNlTG9nZ2VyIHtcblx0Y29uc3RydWN0b3Iob3B0aW9ucyl7XG5cdFx0c3VwZXIob3B0aW9ucyk7XG5cdFx0dGhpcy5uYW1lID0gJ0dhdWdlUmVzcG9uc2VMb2dnZXInO1xuXHRcdHRoaXMubGV2ZWwgPSAnb2snO1xuXHRcdHRoaXMua2V5ICAgPSAndmFsJztcblx0fVxufVxuXG52YXIgZ2V0VHJhbnNwb3J0Rm9yR3JvdXAgPSBmdW5jdGlvbihncm91cCwgb3B0cykge1xuXHRpZiAoZ3JvdXAgPT09IFwidGltZVwiKSB7XG5cdFx0cmV0dXJuIG5ldyBUaW1lUmVzcG9uc2VMb2dnZXIob3B0cyk7XG5cdH1cblx0ZWxzZSBpZiAoZ3JvdXAgPT09IFwiZ2F1Z2VcIikge1xuXHRcdHJldHVybiBuZXcgR2F1Z2VSZXNwb25zZUxvZ2dlcihvcHRzKTtcblx0fVxuXHRlbHNlIHtcblx0XHRyZXR1cm4gbmV3IFJlc3BvbnNlTG9nZ2VyKG9wdHMpO1xuXHR9XG59XG5cbnZhciBmbHVzaExvZ3NUb1Jlc3BvbnNlID0gZnVuY3Rpb24ocmVzKSB7XG5cdGlmIChxdWV1ZSgpLmxlbmd0aCA+IDApIHtcblx0XHRyZXMud3JpdGUoXCI8c2NyaXB0PlwiKTtcblx0XHRyZXMud3JpdGUoYHdpbmRvdy5yZWFjdFNlcnZlckxvZ3MgPSAke0pTT04uc3RyaW5naWZ5KHF1ZXVlKCkpfTtcXG5gKTtcblx0XHRyZXMud3JpdGUoXCI8L3NjcmlwdD5cIik7XG5cdH1cbn1cblxudmFyIHNldFJlc3BvbnNlTG9nZ2VyUGFnZSA9IGZ1bmN0aW9uKHBhZ2UpIHtcblx0aWYgKFJMUy5pc0FjdGl2ZSgpICYmICEhcGFnZSkge1xuXHRcdFJMUygpLmRvTG9nID0gcGFnZS5nZXRSZXF1ZXN0KCkuZ2V0UXVlcnkoKS5fZGVidWdfb3V0cHV0X2xvZ3M7XG5cdH1cbn1cbm1vZHVsZS5leHBvcnRzID0ge3NldFJlc3BvbnNlTG9nZ2VyUGFnZSwgZmx1c2hMb2dzVG9SZXNwb25zZSwgZ2V0VHJhbnNwb3J0Rm9yR3JvdXAsIFRpbWVSZXNwb25zZUxvZ2dlciwgUmVzcG9uc2VMb2dnZXJ9O1xuIl19
