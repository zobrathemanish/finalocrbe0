'use strict';

// This is a subjective classification of response times into three
// performance buckets: "fast", "fine" and "slow".
//
// If you're timing something for which these default thresholds don't make
// sense, you can override them either in your call to `getLogger` or in your
// call to `time` or `timer` itself.
//
// Example:
//
//   var logger = require('./logging').getLogger({"label":"{\n//           timing: { fast: 25, fine: 100 }\n//   }","name":"react-server.core.logging.stats.{\n//           timing: { fast: 25, fine: 100 }\n//   }","color":{"server":203,"client":"rgb(212,42,42)"}});
//
//   logger.time("something", millseconds, { fast: 50 });
//
//   var timer = logger.timer("somethingElse", { fine: 250 });
//
var DEFAULT_TIME_THRESHOLDS = {
	fast: 100,
	fine: 250

	// This is a subjective classification of gauge values into three
	// buckets: "lo", "hi" and "ok".
	//
	// If you're tracking something for which these default thresholds don't make
	// sense, you can override them in your call to `getLogger` or in your call to
	// `gauge` iteself.
	//
	// Example:
	//
	//   var logger = require('./logging').getLogger({"label":"{\n//           gauge: { lo: 10000, hi: 100000 }\n//   }","name":"react-server.core.logging.stats.{\n//           gauge: { lo: 10000, hi: 100000 }\n//   }","color":{"server":143,"client":"rgb(127,127,42)"}});
	//
	//   logger.gauge("something", value, { hi: 1000000 });
	//
};var DEFAULT_GAUGE_THRESHOLDS = {
	lo: -1,
	hi: 101
};

var loggers = {};

// Each logger actually has some secondary loggers attached to it for stats.
// This helper wires them up.
function wrapLogger(getLoggerForConfig, opts) {

	var mainLogger = getLoggerForConfig('main', opts),
	    timeLogger = getLoggerForConfig('time', opts),
	    gaugeLogger = getLoggerForConfig('gauge', opts),
	    classifyTime = makeTimeClassifier(opts),
	    classifyGauge = makeGaugeClassifier(opts);

	// These are methods that are exposed on the primary logger.
	// They just dispatch to appropriate log levels on secondary loggers.
	mainLogger.time = function (token, ms, opts) {
		return timeLogger[classifyTime(ms, opts)](token, { ms: ms });
	};
	mainLogger.gauge = function (token, val, opts) {
		return gaugeLogger[classifyGauge(val, opts)](token, { val: val });
	};

	// Expose these.
	mainLogger.timeLogger = timeLogger;
	mainLogger.gaugeLogger = gaugeLogger;

	// This is just a convenience wrapper around the `time` method.
	mainLogger.timer = function (token, opts) {

		var t0 = new Date() // For use by `timer.stop`.
		,
		    tt = t0 // For use by `timer.tick`.
		,
		    nt = 0 // Number of times `tick` has been called.
		,
		    ct = 0; // For storing return values.

		return {

			// The `stop` method logs the total elapsed time since
			// timer creation.
			stop: function stop() {
				return mainLogger.time(token, ct = new Date() - t0, opts), ct;
			},

			// The `tick` method logs the time elapsed since the
			// last call to `tick` (or since timer creation).  A
			// tick may be named.  If a name is not passed in the
			// number of times `tick` has been called on this
			// timer will be used.  Don't mix named and un-named
			// ticks.
			tick: function tick(name) {
				var now = new Date();

				name || (name = 'tick_' + nt++);

				mainLogger.time(token + '.' + name, ct = now - tt, opts);

				tt = now;

				return ct;
			}
		};
	};

	return mainLogger;
}

// This is used for classifying `time` and `gauge` values.
function makeThresholdsSieve(options, defaults) {

	if (!options) options = {};

	// Pre-apply defaults.
	Object.keys(defaults).forEach(function (key) {
		return options[key] || (options[key] = defaults[key]);
	});

	return function (key, overrides) {
		if (overrides && overrides[key] !== void 0) return overrides[key];
		return options[key];
	};
}

function makeTimeClassifier(opts) {
	var thresholds = makeThresholdsSieve(opts.timing, DEFAULT_TIME_THRESHOLDS);
	var fast = thresholds('fast');
	var fine = thresholds('fine');
	return function (ms, o) {
		if (o) {
			if (ms <= thresholds('fast', o)) return 'fast';else if (ms <= thresholds('fine', o)) return 'fine';else return 'slow';
		} else {
			if (ms <= fast) return 'fast';else if (ms <= fine) return 'fine';else return 'slow';
		}
	};
}

function makeGaugeClassifier(opts) {
	var thresholds = makeThresholdsSieve(opts.gauge, DEFAULT_GAUGE_THRESHOLDS);
	var lo = thresholds('lo');
	var hi = thresholds('hi');
	return function (val, o) {
		if (o) {
			if (val <= thresholds('lo', o)) return 'lo';else if (val >= thresholds('hi', o)) return 'hi';else return 'ok';
		} else {
			if (val <= lo) return 'lo';else if (val >= hi) return 'hi';else return 'ok';
		}
	};
}

function getCombinedLogger(getLoggerForConfig, opts) {
	return loggers[opts.name] || (loggers[opts.name] = wrapLogger(getLoggerForConfig, opts));
}

module.exports = { getCombinedLogger: getCombinedLogger };
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxvZ2dpbmcvc3RhdHMuanMiXSwibmFtZXMiOlsiREVGQVVMVF9USU1FX1RIUkVTSE9MRFMiLCJmYXN0IiwiZmluZSIsIkRFRkFVTFRfR0FVR0VfVEhSRVNIT0xEUyIsImxvIiwiaGkiLCJsb2dnZXJzIiwid3JhcExvZ2dlciIsImdldExvZ2dlckZvckNvbmZpZyIsIm9wdHMiLCJtYWluTG9nZ2VyIiwidGltZUxvZ2dlciIsImdhdWdlTG9nZ2VyIiwiY2xhc3NpZnlUaW1lIiwibWFrZVRpbWVDbGFzc2lmaWVyIiwiY2xhc3NpZnlHYXVnZSIsIm1ha2VHYXVnZUNsYXNzaWZpZXIiLCJ0aW1lIiwidG9rZW4iLCJtcyIsImdhdWdlIiwidmFsIiwidGltZXIiLCJ0MCIsIkRhdGUiLCJ0dCIsIm50IiwiY3QiLCJzdG9wIiwidGljayIsIm5hbWUiLCJub3ciLCJtYWtlVGhyZXNob2xkc1NpZXZlIiwib3B0aW9ucyIsImRlZmF1bHRzIiwiT2JqZWN0Iiwia2V5cyIsImZvckVhY2giLCJrZXkiLCJvdmVycmlkZXMiLCJ0aHJlc2hvbGRzIiwidGltaW5nIiwibyIsImdldENvbWJpbmVkTG9nZ2VyIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6Ijs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJQSwwQkFBMEI7QUFDN0JDLE9BQU0sR0FEdUI7QUFFN0JDLE9BQU07O0FBR1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFqQjhCLENBQTlCLENBa0JBLElBQUlDLDJCQUEyQjtBQUM5QkMsS0FBSSxDQUFDLENBRHlCO0FBRTlCQyxLQUFJO0FBRjBCLENBQS9COztBQUtBLElBQUlDLFVBQVUsRUFBZDs7QUFFQTtBQUNBO0FBQ0EsU0FBU0MsVUFBVCxDQUFvQkMsa0JBQXBCLEVBQXdDQyxJQUF4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QUFTc0MsaUJBQVQsQ0FBMkJuQyxrQkFBM0IsRUFBK0NDLElBQS9DLEVBQXFEO0FBQ3BELFFBQU9ILFFBQVFHLEtBQUtxQixJQUFiLE1BQXVCeEIsUUFBUUcsS0FBS3FCLElBQWIsSUFBcUJ2QixXQUFXQyxrQkFBWCxFQUErQkMsSUFBL0IsQ0FBNUMsQ0FBUDtBQUNBOztBQUVEbUMsT0FBT0MsT0FBUCxHQUFpQixFQUFFRixvQ0FBRixFQUFqQiIsImZpbGUiOiJsb2dnaW5nL3N0YXRzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gVGhpcyBpcyBhIHN1YmplY3RpdmUgY2xhc3NpZmljYXRpb24gb2YgcmVzcG9uc2UgdGltZXMgaW50byB0aHJlZVxuLy8gcGVyZm9ybWFuY2UgYnVja2V0czogXCJmYXN0XCIsIFwiZmluZVwiIGFuZCBcInNsb3dcIi5cbi8vXG4vLyBJZiB5b3UncmUgdGltaW5nIHNvbWV0aGluZyBmb3Igd2hpY2ggdGhlc2UgZGVmYXVsdCB0aHJlc2hvbGRzIGRvbid0IG1ha2Vcbi8vIHNlbnNlLCB5b3UgY2FuIG92ZXJyaWRlIHRoZW0gZWl0aGVyIGluIHlvdXIgY2FsbCB0byBgZ2V0TG9nZ2VyYCBvciBpbiB5b3VyXG4vLyBjYWxsIHRvIGB0aW1lYCBvciBgdGltZXJgIGl0c2VsZi5cbi8vXG4vLyBFeGFtcGxlOlxuLy9cbi8vICAgdmFyIGxvZ2dlciA9IHJlcXVpcmUoJy4vbG9nZ2luZycpLmdldExvZ2dlcih7XCJsYWJlbFwiOlwie1xcbi8vICAgICAgICAgICB0aW1pbmc6IHsgZmFzdDogMjUsIGZpbmU6IDEwMCB9XFxuLy8gICB9XCIsXCJuYW1lXCI6XCJyZWFjdC1zZXJ2ZXIuY29yZS5sb2dnaW5nLnN0YXRzLntcXG4vLyAgICAgICAgICAgdGltaW5nOiB7IGZhc3Q6IDI1LCBmaW5lOiAxMDAgfVxcbi8vICAgfVwiLFwiY29sb3JcIjp7XCJzZXJ2ZXJcIjoyMDMsXCJjbGllbnRcIjpcInJnYigyMTIsNDIsNDIpXCJ9fSk7XG4vL1xuLy8gICBsb2dnZXIudGltZShcInNvbWV0aGluZ1wiLCBtaWxsc2Vjb25kcywgeyBmYXN0OiA1MCB9KTtcbi8vXG4vLyAgIHZhciB0aW1lciA9IGxvZ2dlci50aW1lcihcInNvbWV0aGluZ0Vsc2VcIiwgeyBmaW5lOiAyNTAgfSk7XG4vL1xudmFyIERFRkFVTFRfVElNRV9USFJFU0hPTERTID0ge1xuXHRmYXN0OiAxMDAsXG5cdGZpbmU6IDI1MCxcbn1cblxuLy8gVGhpcyBpcyBhIHN1YmplY3RpdmUgY2xhc3NpZmljYXRpb24gb2YgZ2F1Z2UgdmFsdWVzIGludG8gdGhyZWVcbi8vIGJ1Y2tldHM6IFwibG9cIiwgXCJoaVwiIGFuZCBcIm9rXCIuXG4vL1xuLy8gSWYgeW91J3JlIHRyYWNraW5nIHNvbWV0aGluZyBmb3Igd2hpY2ggdGhlc2UgZGVmYXVsdCB0aHJlc2hvbGRzIGRvbid0IG1ha2Vcbi8vIHNlbnNlLCB5b3UgY2FuIG92ZXJyaWRlIHRoZW0gaW4geW91ciBjYWxsIHRvIGBnZXRMb2dnZXJgIG9yIGluIHlvdXIgY2FsbCB0b1xuLy8gYGdhdWdlYCBpdGVzZWxmLlxuLy9cbi8vIEV4YW1wbGU6XG4vL1xuLy8gICB2YXIgbG9nZ2VyID0gcmVxdWlyZSgnLi9sb2dnaW5nJykuZ2V0TG9nZ2VyKHtcImxhYmVsXCI6XCJ7XFxuLy8gICAgICAgICAgIGdhdWdlOiB7IGxvOiAxMDAwMCwgaGk6IDEwMDAwMCB9XFxuLy8gICB9XCIsXCJuYW1lXCI6XCJyZWFjdC1zZXJ2ZXIuY29yZS5sb2dnaW5nLnN0YXRzLntcXG4vLyAgICAgICAgICAgZ2F1Z2U6IHsgbG86IDEwMDAwLCBoaTogMTAwMDAwIH1cXG4vLyAgIH1cIixcImNvbG9yXCI6e1wic2VydmVyXCI6MTQzLFwiY2xpZW50XCI6XCJyZ2IoMTI3LDEyNyw0MilcIn19KTtcbi8vXG4vLyAgIGxvZ2dlci5nYXVnZShcInNvbWV0aGluZ1wiLCB2YWx1ZSwgeyBoaTogMTAwMDAwMCB9KTtcbi8vXG52YXIgREVGQVVMVF9HQVVHRV9USFJFU0hPTERTID0ge1xuXHRsbzogLTEsXG5cdGhpOiAxMDEsXG59XG5cbnZhciBsb2dnZXJzID0ge307XG5cbi8vIEVhY2ggbG9nZ2VyIGFjdHVhbGx5IGhhcyBzb21lIHNlY29uZGFyeSBsb2dnZXJzIGF0dGFjaGVkIHRvIGl0IGZvciBzdGF0cy5cbi8vIFRoaXMgaGVscGVyIHdpcmVzIHRoZW0gdXAuXG5mdW5jdGlvbiB3cmFwTG9nZ2VyKGdldExvZ2dlckZvckNvbmZpZywgb3B0cykge1xuXG5cdHZhciBtYWluTG9nZ2VyICAgID0gZ2V0TG9nZ2VyRm9yQ29uZmlnKCdtYWluJywgIG9wdHMpXG5cdCwgICB0aW1lTG9nZ2VyICAgID0gZ2V0TG9nZ2VyRm9yQ29uZmlnKCd0aW1lJywgIG9wdHMpXG5cdCwgICBnYXVnZUxvZ2dlciAgID0gZ2V0TG9nZ2VyRm9yQ29uZmlnKCdnYXVnZScsIG9wdHMpXG5cdCwgICBjbGFzc2lmeVRpbWUgID0gbWFrZVRpbWVDbGFzc2lmaWVyKG9wdHMpXG5cdCwgICBjbGFzc2lmeUdhdWdlID0gbWFrZUdhdWdlQ2xhc3NpZmllcihvcHRzKVxuXG5cdC8vIFRoZXNlIGFyZSBtZXRob2RzIHRoYXQgYXJlIGV4cG9zZWQgb24gdGhlIHByaW1hcnkgbG9nZ2VyLlxuXHQvLyBUaGV5IGp1c3QgZGlzcGF0Y2ggdG8gYXBwcm9wcmlhdGUgbG9nIGxldmVscyBvbiBzZWNvbmRhcnkgbG9nZ2Vycy5cblx0bWFpbkxvZ2dlci50aW1lICA9ICh0b2tlbiwgbXMsICBvcHRzKSA9PiB0aW1lTG9nZ2VyIFtjbGFzc2lmeVRpbWUgKG1zLCAgb3B0cyldKHRva2VuLCB7bXMgfSk7XG5cdG1haW5Mb2dnZXIuZ2F1Z2UgPSAodG9rZW4sIHZhbCwgb3B0cykgPT4gZ2F1Z2VMb2dnZXJbY2xhc3NpZnlHYXVnZSh2YWwsIG9wdHMpXSh0b2tlbiwge3ZhbH0pO1xuXG5cdC8vIEV4cG9zZSB0aGVzZS5cblx0bWFpbkxvZ2dlci50aW1lTG9nZ2VyICA9IHRpbWVMb2dnZXI7XG5cdG1haW5Mb2dnZXIuZ2F1Z2VMb2dnZXIgPSBnYXVnZUxvZ2dlcjtcblxuXHQvLyBUaGlzIGlzIGp1c3QgYSBjb252ZW5pZW5jZSB3cmFwcGVyIGFyb3VuZCB0aGUgYHRpbWVgIG1ldGhvZC5cblx0bWFpbkxvZ2dlci50aW1lciA9ICh0b2tlbiwgb3B0cykgPT4ge1xuXG5cdFx0dmFyIHQwID0gbmV3IERhdGUgLy8gRm9yIHVzZSBieSBgdGltZXIuc3RvcGAuXG5cdFx0LCAgIHR0ID0gdDAgICAgICAgLy8gRm9yIHVzZSBieSBgdGltZXIudGlja2AuXG5cdFx0LCAgIG50ID0gMCAgICAgICAgLy8gTnVtYmVyIG9mIHRpbWVzIGB0aWNrYCBoYXMgYmVlbiBjYWxsZWQuXG5cdFx0LCAgIGN0ID0gMCAgICAgICAgLy8gRm9yIHN0b3JpbmcgcmV0dXJuIHZhbHVlcy5cblxuXHRcdHJldHVybiB7XG5cblx0XHRcdC8vIFRoZSBgc3RvcGAgbWV0aG9kIGxvZ3MgdGhlIHRvdGFsIGVsYXBzZWQgdGltZSBzaW5jZVxuXHRcdFx0Ly8gdGltZXIgY3JlYXRpb24uXG5cdFx0XHRzdG9wOiAoKSA9PiAobWFpbkxvZ2dlci50aW1lKHRva2VuLCBjdCA9IG5ldyBEYXRlIC0gdDAsIG9wdHMpLCBjdCksXG5cblx0XHRcdC8vIFRoZSBgdGlja2AgbWV0aG9kIGxvZ3MgdGhlIHRpbWUgZWxhcHNlZCBzaW5jZSB0aGVcblx0XHRcdC8vIGxhc3QgY2FsbCB0byBgdGlja2AgKG9yIHNpbmNlIHRpbWVyIGNyZWF0aW9uKS4gIEFcblx0XHRcdC8vIHRpY2sgbWF5IGJlIG5hbWVkLiAgSWYgYSBuYW1lIGlzIG5vdCBwYXNzZWQgaW4gdGhlXG5cdFx0XHQvLyBudW1iZXIgb2YgdGltZXMgYHRpY2tgIGhhcyBiZWVuIGNhbGxlZCBvbiB0aGlzXG5cdFx0XHQvLyB0aW1lciB3aWxsIGJlIHVzZWQuICBEb24ndCBtaXggbmFtZWQgYW5kIHVuLW5hbWVkXG5cdFx0XHQvLyB0aWNrcy5cblx0XHRcdHRpY2s6IChuYW1lKSA9PiB7XG5cdFx0XHRcdHZhciBub3cgPSBuZXcgRGF0ZVxuXG5cdFx0XHRcdG5hbWUgfHwgKG5hbWUgPSBgdGlja18ke250Kyt9YCk7XG5cblx0XHRcdFx0bWFpbkxvZ2dlci50aW1lKGAke3Rva2VufS4ke25hbWV9YCwgY3Q9bm93LXR0LCBvcHRzKTtcblxuXHRcdFx0XHR0dCA9IG5vdztcblxuXHRcdFx0XHRyZXR1cm4gY3Rcblx0XHRcdH0sXG5cdFx0fTtcblx0fVxuXG5cdHJldHVybiBtYWluTG9nZ2VyO1xufVxuXG4vLyBUaGlzIGlzIHVzZWQgZm9yIGNsYXNzaWZ5aW5nIGB0aW1lYCBhbmQgYGdhdWdlYCB2YWx1ZXMuXG5mdW5jdGlvbiBtYWtlVGhyZXNob2xkc1NpZXZlKG9wdGlvbnMsIGRlZmF1bHRzKSB7XG5cblx0aWYgKCFvcHRpb25zKSBvcHRpb25zID0ge307XG5cblx0Ly8gUHJlLWFwcGx5IGRlZmF1bHRzLlxuXHRPYmplY3Qua2V5cyhkZWZhdWx0cykuZm9yRWFjaChrZXkgPT4gb3B0aW9uc1trZXldIHx8IChvcHRpb25zW2tleV0gPSBkZWZhdWx0c1trZXldKSk7XG5cblx0cmV0dXJuIChrZXksIG92ZXJyaWRlcykgPT4ge1xuXHRcdGlmIChvdmVycmlkZXMgJiYgb3ZlcnJpZGVzW2tleV0gIT09IHZvaWQgMCkgcmV0dXJuIG92ZXJyaWRlc1trZXldO1xuXHRcdHJldHVybiBvcHRpb25zW2tleV07XG5cdH1cbn1cblxuZnVuY3Rpb24gbWFrZVRpbWVDbGFzc2lmaWVyKG9wdHMpIHtcblx0dmFyIHRocmVzaG9sZHMgPSBtYWtlVGhyZXNob2xkc1NpZXZlKG9wdHMudGltaW5nLCBERUZBVUxUX1RJTUVfVEhSRVNIT0xEUyk7XG5cdHZhciBmYXN0ID0gdGhyZXNob2xkcygnZmFzdCcpO1xuXHR2YXIgZmluZSA9IHRocmVzaG9sZHMoJ2ZpbmUnKTtcblx0cmV0dXJuIChtcywgbykgPT4ge1xuXHRcdGlmIChvKSB7XG5cdFx0XHRpZiAgICAgIChtcyA8PSB0aHJlc2hvbGRzKCdmYXN0JywgbykpIHJldHVybiAnZmFzdCc7XG5cdFx0XHRlbHNlIGlmIChtcyA8PSB0aHJlc2hvbGRzKCdmaW5lJywgbykpIHJldHVybiAnZmluZSc7XG5cdFx0XHRlbHNlICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnc2xvdyc7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGlmICAgICAgKG1zIDw9IGZhc3QpIHJldHVybiAnZmFzdCc7XG5cdFx0XHRlbHNlIGlmIChtcyA8PSBmaW5lKSByZXR1cm4gJ2ZpbmUnO1xuXHRcdFx0ZWxzZSAgICAgICAgICAgICAgICAgcmV0dXJuICdzbG93Jztcblx0XHR9XG5cdH1cbn1cblxuZnVuY3Rpb24gbWFrZUdhdWdlQ2xhc3NpZmllcihvcHRzKSB7XG5cdHZhciB0aHJlc2hvbGRzID0gbWFrZVRocmVzaG9sZHNTaWV2ZShvcHRzLmdhdWdlLCBERUZBVUxUX0dBVUdFX1RIUkVTSE9MRFMpO1xuXHR2YXIgbG8gPSB0aHJlc2hvbGRzKCdsbycpO1xuXHR2YXIgaGkgPSB0aHJlc2hvbGRzKCdoaScpO1xuXHRyZXR1cm4gKHZhbCwgbykgPT4ge1xuXHRcdGlmIChvKSB7XG5cdFx0XHRpZiAgICAgICh2YWwgPD0gdGhyZXNob2xkcygnbG8nLCBvKSkgcmV0dXJuICdsbyc7XG5cdFx0XHRlbHNlIGlmICh2YWwgPj0gdGhyZXNob2xkcygnaGknLCBvKSkgcmV0dXJuICdoaSc7XG5cdFx0XHRlbHNlICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdvayc7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGlmICAgICAgKHZhbCA8PSBsbykgcmV0dXJuICdsbyc7XG5cdFx0XHRlbHNlIGlmICh2YWwgPj0gaGkpIHJldHVybiAnaGknO1xuXHRcdFx0ZWxzZSAgICAgICAgICAgICAgICByZXR1cm4gJ29rJztcblx0XHR9XG5cdH1cblxufVxuXG5mdW5jdGlvbiBnZXRDb21iaW5lZExvZ2dlcihnZXRMb2dnZXJGb3JDb25maWcsIG9wdHMpIHtcblx0cmV0dXJuIGxvZ2dlcnNbb3B0cy5uYW1lXSB8fCAobG9nZ2Vyc1tvcHRzLm5hbWVdID0gd3JhcExvZ2dlcihnZXRMb2dnZXJGb3JDb25maWcsIG9wdHMpKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7IGdldENvbWJpbmVkTG9nZ2VyIH07XG4iXX0=
