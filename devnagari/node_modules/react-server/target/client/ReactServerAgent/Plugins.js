"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * Wrapper class around RLS-scoped ReactServerAgent plugins to avoid
 * a circular dependency between ReactServerAgent and ReactServerAgent/Request.
 *
 * Note: It's possible that this module shouldn't exist at all. ReactServerAgent
 * plugins maybe shouldn't be request-scoped; they could be set statically,
 * and get their data from RLS if they wanted, instead. i.e., store something
 * in RLS, then have the plugin retrieve it, and that way the code being
 * executed is the same for _all_ requests)
 */

var RLS = require('../util/RequestLocalStorage').getNamespace();

// Simple wrapper around an array the implements the
// API we want for adding/getting plugins

var PluginsHolder = function () {
	function PluginsHolder() {
		_classCallCheck(this, PluginsHolder);

		this.plugins = [];
	}

	_createClass(PluginsHolder, [{
		key: "asArray",
		value: function asArray() {
			// return a copy of the plugins array so that
			// the returned array can't change underneath
			// the caller
			return [].concat(this.plugins);
		}
	}, {
		key: "add",
		value: function add(plugin) {
			this.plugins.push(plugin);
		}
	}]);

	return PluginsHolder;
}();

function getPlugins(pluginType) {
	return RLS()[pluginType] || (RLS()[pluginType] = new PluginsHolder());
}

module.exports = {
	forRequest: getPlugins.bind(null, "request"),
	forResponse: getPlugins.bind(null, "response")
};
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIlJlYWN0U2VydmVyQWdlbnQvUGx1Z2lucy5qcyJdLCJuYW1lcyI6WyJSTFMiLCJyZXF1aXJlIiwiZ2V0TmFtZXNwYWNlIiwiUGx1Z2luc0hvbGRlciIsInBsdWdpbnMiLCJjb25jYXQiLCJwbHVnaW4iLCJwdXNoIiwiZ2V0UGx1Z2lucyIsInBsdWdpblR5cGUiLCJtb2R1bGUiLCJleHBvcnRzIiwiZm9yUmVxdWVzdCIsImJpbmQiLCJmb3JSZXNwb25zZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUE7Ozs7Ozs7Ozs7O0FBV0EsSUFBSUEsTUFBTUMsUUFBUSw2QkFBUixFQUF1Q0MsWUFBdkMsRUFBVjs7QUFHQTtBQUNBOztJQUNNQyxhO0FBRUwsMEJBQWU7QUFBQTs7QUFDZCxPQUFLQyxPQUFMLEdBQWUsRUFBZjtBQUNBOzs7OzRCQUVVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0EsVUFBTyxHQUFHQyxNQUFILENBQVUsS0FBS0QsT0FBZixDQUFQO0FBQ0E7OztzQkFFSUUsTSxFQUFRO0FBQ1osUUFBS0YsT0FBTCxDQUFhRyxJQUFiLENBQWtCRCxNQUFsQjtBQUNBOzs7Ozs7QUFJRixTQUFTRSxVQUFULENBQXFCQyxVQUFyQixFQUFpQztBQUNoQyxRQUFRVCxNQUFNUyxVQUFOLE1BQXNCVCxNQUFNUyxVQUFOLElBQW9CLElBQUlOLGFBQUosRUFBMUMsQ0FBUjtBQUNBOztBQUdETyxPQUFPQyxPQUFQLEdBQWlCO0FBQ2hCQyxhQUFhSixXQUFXSyxJQUFYLENBQWdCLElBQWhCLEVBQXNCLFNBQXRCLENBREc7QUFFaEJDLGNBQWFOLFdBQVdLLElBQVgsQ0FBZ0IsSUFBaEIsRUFBc0IsVUFBdEI7QUFGRyxDQUFqQiIsImZpbGUiOiJSZWFjdFNlcnZlckFnZW50L1BsdWdpbnMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIFdyYXBwZXIgY2xhc3MgYXJvdW5kIFJMUy1zY29wZWQgUmVhY3RTZXJ2ZXJBZ2VudCBwbHVnaW5zIHRvIGF2b2lkXG4gKiBhIGNpcmN1bGFyIGRlcGVuZGVuY3kgYmV0d2VlbiBSZWFjdFNlcnZlckFnZW50IGFuZCBSZWFjdFNlcnZlckFnZW50L1JlcXVlc3QuXG4gKlxuICogTm90ZTogSXQncyBwb3NzaWJsZSB0aGF0IHRoaXMgbW9kdWxlIHNob3VsZG4ndCBleGlzdCBhdCBhbGwuIFJlYWN0U2VydmVyQWdlbnRcbiAqIHBsdWdpbnMgbWF5YmUgc2hvdWxkbid0IGJlIHJlcXVlc3Qtc2NvcGVkOyB0aGV5IGNvdWxkIGJlIHNldCBzdGF0aWNhbGx5LFxuICogYW5kIGdldCB0aGVpciBkYXRhIGZyb20gUkxTIGlmIHRoZXkgd2FudGVkLCBpbnN0ZWFkLiBpLmUuLCBzdG9yZSBzb21ldGhpbmdcbiAqIGluIFJMUywgdGhlbiBoYXZlIHRoZSBwbHVnaW4gcmV0cmlldmUgaXQsIGFuZCB0aGF0IHdheSB0aGUgY29kZSBiZWluZ1xuICogZXhlY3V0ZWQgaXMgdGhlIHNhbWUgZm9yIF9hbGxfIHJlcXVlc3RzKVxuICovXG5cbnZhciBSTFMgPSByZXF1aXJlKCcuLi91dGlsL1JlcXVlc3RMb2NhbFN0b3JhZ2UnKS5nZXROYW1lc3BhY2UoKVxuO1xuXG4vLyBTaW1wbGUgd3JhcHBlciBhcm91bmQgYW4gYXJyYXkgdGhlIGltcGxlbWVudHMgdGhlXG4vLyBBUEkgd2Ugd2FudCBmb3IgYWRkaW5nL2dldHRpbmcgcGx1Z2luc1xuY2xhc3MgUGx1Z2luc0hvbGRlciB7XG5cblx0Y29uc3RydWN0b3IgKCkge1xuXHRcdHRoaXMucGx1Z2lucyA9IFtdO1xuXHR9XG5cblx0YXNBcnJheSAoKSB7XG5cdFx0Ly8gcmV0dXJuIGEgY29weSBvZiB0aGUgcGx1Z2lucyBhcnJheSBzbyB0aGF0XG5cdFx0Ly8gdGhlIHJldHVybmVkIGFycmF5IGNhbid0IGNoYW5nZSB1bmRlcm5lYXRoXG5cdFx0Ly8gdGhlIGNhbGxlclxuXHRcdHJldHVybiBbXS5jb25jYXQodGhpcy5wbHVnaW5zKTtcblx0fVxuXG5cdGFkZCAocGx1Z2luKSB7XG5cdFx0dGhpcy5wbHVnaW5zLnB1c2gocGx1Z2luKTtcblx0fVxuXG59XG5cbmZ1bmN0aW9uIGdldFBsdWdpbnMgKHBsdWdpblR5cGUpIHtcblx0cmV0dXJuIChSTFMoKVtwbHVnaW5UeXBlXSB8fCAoUkxTKClbcGx1Z2luVHlwZV0gPSBuZXcgUGx1Z2luc0hvbGRlcigpKSk7XG59XG5cblxubW9kdWxlLmV4cG9ydHMgPSB7XG5cdGZvclJlcXVlc3Q6ICBnZXRQbHVnaW5zLmJpbmQobnVsbCwgXCJyZXF1ZXN0XCIpLFxuXHRmb3JSZXNwb25zZTogZ2V0UGx1Z2lucy5iaW5kKG51bGwsIFwicmVzcG9uc2VcIiksXG59O1xuIl19
