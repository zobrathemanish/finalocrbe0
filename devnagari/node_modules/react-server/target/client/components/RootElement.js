'use strict';

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var React = require('react');
var PropTypes = require('prop-types');
var Q = require('q');

var _require = require('./TheFold'),
    isTheFold = _require.isTheFold;

var _ = {
	assign: require('lodash/assign')
};

var logger = require('../logging').getLogger({ "name": "react-server.core.components.RootElement", "color": { "server": 75, "client": "rgb(42,127,212)" } });

var RootElement = function (_React$Component) {
	_inherits(RootElement, _React$Component);

	function RootElement(props) {
		_classCallCheck(this, RootElement);

		var _this = _possibleConstructorReturn(this, (RootElement.__proto__ || Object.getPrototypeOf(RootElement)).call(this, props));

		_this.state = {
			childProps: props.childProps
		};
		return _this;
	}

	_createClass(RootElement, [{
		key: 'componentDidMount',
		value: function componentDidMount() {
			var _this2 = this;

			if (this.props.subscribe) {
				this.props.subscribe(function (childProps) {
					var now = new Date();
					var name = _this2.getChildName();
					var count = ++_this2._changeCount;
					var fromMount = now - _this2._t0;
					var fromLastChange = now - _this2._t1;
					_this2._t1 = now;

					// Log some stuff about the change.
					['byName.' + name, 'all'].forEach(function (tag) {
						logger.time('change.fromMount.' + tag, fromMount);
						logger.time('change.fromLastChange.' + tag, fromLastChange);
						logger.gauge('change.count.' + tag, count);
					});

					// Okay, now we've complained about it
					// sufficiently, let's go ahead and update.
					var newChildProps = _.assign({}, _this2.state.childProps, childProps);
					_this2.setState({
						childProps: newChildProps
					});
				});
			}
		}
	}, {
		key: 'componentWillUnmount',
		value: function componentWillUnmount() {
			if (this.props.unsubscribe) this.props.unsubscribe();
		}
	}, {
		key: 'componentWillReceiveProps',
		value: function componentWillReceiveProps(nextProps) {
			// Incase we receive new props such as during client transitions
			// We will want to update our state's childProp with any new childProps
			// that may have been passed in. This still respects props as the ultimate source of truth
			var newChildProps = _.assign({}, this.state.childProps, nextProps.childProps);
			this.setState({
				childProps: newChildProps
			});
		}
	}, {
		key: 'render',
		value: function render() {

			// We'll use these to log stuff about re-renders.
			if (!this._t0) {
				this._t0 = this._t1 = new Date();
				this._changeCount = 0;
			}

			if (typeof this.props.children === 'string') {

				logger.error("Root elements cannot be raw text", { text: this.props.children });

				// Don't keep choking on it.  Just gut it.
				return React.createElement('div', null);
			}

			return React.cloneElement(React.Children.only(this.props.children), this.state.childProps);
		}
	}, {
		key: 'getChildName',
		value: function getChildName() {
			if (!this._childName) {
				this._childName = (React.Children.only(this.props.children).type.displayName || 'Unknown').split('.').pop();
			}
			return this._childName;
		}
	}]);

	return RootElement;
}(React.Component);

module.exports = RootElement;

RootElement.propTypes = {
	listen: PropTypes.func,
	when: PropTypes.object, // A promise.
	childProps: PropTypes.object,
	_isRootElement: PropTypes.bool
};

RootElement.defaultProps = {
	_isRootElement: true
};

RootElement.isRootElement = function (element) {
	return element && element.props && element.props._isRootElement;
};

RootElement.getRootElementAttributes = function (element) {
	var props = element.props;
	var attrs = {};

	if (props.className) attrs.class = props.className;

	// TODO: Others?
	['id', 'style'].forEach(function (k) {
		return props[k] && (attrs[k] = props[k]);
	});

	return attrs;
};

RootElement.ensureRootElementWithContainer = function (element, container) {

	// If it's _already_ a root element (or the fold), pass it along.
	if (RootElement.isRootElement(element) || isTheFold(element) ||

	// Alternatively, if it's a control object pass it along.
	//
	// We exclude strings here since we already gripe about them
	// at render time.
	//
	!React.isValidElement(element) && typeof element !== 'string') {
		return element;
	}

	var _container$props = container.props,
	    listen = _container$props.listen,
	    when = _container$props.when;


	return React.createElement(
		RootElement,
		{ listen: listen, when: when },
		element
	);
};

RootElement.ensureRootElement = function (element) {
	return RootElement.ensureRootElementWithContainer(element, { props: {} });
};

RootElement.installListener = function (element, listen) {
	var dfd = Q.defer(),
	    updater,
	    subscribe = function subscribe(callback) {
		updater = callback;
	},
	    unsubscribe = listen(function (childProps) {
		// Once the component has mounted it will provide an updater.
		// After that we can just short-circuit here and let it handle
		// updating itself.
		if (updater) {
			updater(childProps);
		}

		// The promise itself will only resolve once, but we don't
		// want to _clone_ multiple times.
		else if (dfd.promise.isPending()) {
				dfd.resolve(React.cloneElement(element, {
					childProps: childProps,
					subscribe: subscribe,
					unsubscribe: unsubscribe
				}));
			}
	});
	return dfd.promise;
};

RootElement.scheduleRender = function (element) {
	var _ref = (element || {}).props || {},
	    listen = _ref.listen,
	    when = _ref.when,
	    componentLoader = _ref.componentLoader,
	    childProps = _ref.childProps;

	if (!(listen || when || componentLoader || childProps)) {
		return Q(element).then(RootElement.ensureRootElement);
	}

	// This is what we'll ultimately resolve our return promise with.
	// It may be changed by the output of `listen` or `when`.
	var rendered = element;
	var componentLoaderDeferred = componentLoader ? componentLoader() : null;

	// Install the listener right away to start gathering props.
	// It may be a gated emitter, but we want to make sure we squeeze
	// props out of it from the beginning if it's not.
	// Finally gate on the `when`.
	return Q(listen && RootElement.installListener(element, listen)).then(function (el) {
		return el && (rendered = el);
	}).then(function () {
		return Q.allSettled([when, componentLoaderDeferred]);
	}).then(function (results) {
		var _results = _slicedToArray(results, 2),
		    whenResult = _results[0],
		    loadedComponent = _results[1];

		if (whenResult.value || loadedComponent.value || childProps) {
			// merge in child props from listen, when, and childProps
			var clonedChildProps = _.assign({}, rendered.props.childProps, whenResult.value, childProps);

			// if we have a component loader specified, copy the resolved component
			// and render that with the current child as a child of that component
			var currentChild = rendered.props.children;
			var childToRender = componentLoaderDeferred ? React.createElement(loadedComponent.value, null, currentChild) : currentChild;

			return React.cloneElement(rendered, { childProps: clonedChildProps }, childToRender);
		}
		return rendered;
	});
};
//# sourceMappingURL=data:application/json;charset=utf8;base64,
