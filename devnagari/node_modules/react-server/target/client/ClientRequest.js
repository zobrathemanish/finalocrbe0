"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var cookie = require("cookie"),
    decode = require("querystring/decode");

/**
 * This class implements the react-server request API for client-side transitions.
 */

var ClientRequest = function () {
	function ClientRequest(url) {
		var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
		    bundleData = _ref.bundleData,
		    reuseDom = _ref.reuseDom;

		_classCallCheck(this, ClientRequest);

		this._opts = {
			bundleData: bundleData,
			reuseDom: reuseDom

			// Chop off the fragment identifier from the url i.e everything from the # to the end of the url
			// if it exists to make this consistent with ExpressServerRequest.
		};var match = url.match(/([^#]*)/);
		if (match === null || !match[1]) {
			this._url = url;
		} else {
			this._url = match[1];
		}
	}

	_createClass(ClientRequest, [{
		key: "setRoute",
		value: function setRoute(route) {
			this._route = route;
		}
	}, {
		key: "getUrl",
		value: function getUrl() {
			return this._url;
		}
	}, {
		key: "getOpts",
		value: function getOpts() {
			return this._opts;
		}
	}, {
		key: "getReuseDom",
		value: function getReuseDom() {
			return this._opts.reuseDom;
		}
	}, {
		key: "getBundleData",
		value: function getBundleData() {
			return this._opts.bundleData;
		}
	}, {
		key: "getQuery",
		value: function getQuery() {
			// Grab fragment after first "?"
			var match = this._url.match(/\?(.*)/);

			if (match === null || !match[1]) {
				return {};
			}

			return decode(match[1]);
		}
	}, {
		key: "getHostname",
		value: function getHostname() {
			var hostname = null;
			if (typeof window.location.hostname === "string") {
				hostname = window.location.hostname;
			}

			return hostname;
		}
	}, {
		key: "getProtocol",
		value: function getProtocol() {
			var proto = null;
			if (typeof window.location.protocol === "string") {
				proto = window.location.protocol.replace(/:/g, '');
			}

			return proto;
		}
	}, {
		key: "getSecure",
		value: function getSecure() {
			return 'https' === this.getProtocol();
		}
	}, {
		key: "getRouteParams",
		value: function getRouteParams() {
			return this._route.params;
		}
	}, {
		key: "getMethod",
		value: function getMethod() {
			// I believe that client-side transitions should always be
			// HTTP GETs -sra.
			return "get";
		}
	}, {
		key: "getRouteName",
		value: function getRouteName() {
			return this._route.name;
		}
		/*eslint-disable no-unused-vars */

	}, {
		key: "getHttpHeader",
		value: function getHttpHeader(name) {
			// this is a no-op; there are no HTTP headers on the client-side.
		}
	}, {
		key: "getHttpHeaders",
		value: function getHttpHeaders() {}
		// this is a no-op; there are no HTTP headers on the client-side.

		/*eslint-enable no-unused-vars */

	}, {
		key: "getCookie",
		value: function getCookie(name) {
			return this.getCookies()[name];
		}
	}, {
		key: "getCookies",
		value: function getCookies() {

			return cookie.parse(document.cookie);
		}
	}, {
		key: "getBody",
		value: function getBody() {
			console.error("ClientRequest.getBody not implemented.");
		}
	}]);

	return ClientRequest;
}();

module.exports = ClientRequest;
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkNsaWVudFJlcXVlc3QuanMiXSwibmFtZXMiOlsiY29va2llIiwicmVxdWlyZSIsImRlY29kZSIsIkNsaWVudFJlcXVlc3QiLCJ1cmwiLCJidW5kbGVEYXRhIiwicmV1c2VEb20iLCJfb3B0cyIsIm1hdGNoIiwiX3VybCIsInJvdXRlIiwiX3JvdXRlIiwiaG9zdG5hbWUiLCJ3aW5kb3ciLCJsb2NhdGlvbiIsInByb3RvIiwicHJvdG9jb2wiLCJyZXBsYWNlIiwiZ2V0UHJvdG9jb2wiLCJwYXJhbXMiLCJuYW1lIiwiZ2V0Q29va2llcyIsInBhcnNlIiwiZG9jdW1lbnQiLCJjb25zb2xlIiwiZXJyb3IiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSxJQUFJQSxTQUFTQyxRQUFRLFFBQVIsQ0FBYjtBQUFBLElBQ0NDLFNBQVNELFFBQVEsb0JBQVIsQ0FEVjs7QUFHQTs7OztJQUdNRSxhO0FBRUwsd0JBQVlDLEdBQVosRUFHTTtBQUFBLGlGQUFKLEVBQUk7QUFBQSxNQUZMQyxVQUVLLFFBRkxBLFVBRUs7QUFBQSxNQURMQyxRQUNLLFFBRExBLFFBQ0s7O0FBQUE7O0FBQ0wsT0FBS0MsS0FBTCxHQUFhO0FBQ1pGLHlCQURZO0FBRVpDOztBQUdEO0FBQ0E7QUFOYSxHQUFiLENBT0EsSUFBSUUsUUFBUUosSUFBSUksS0FBSixDQUFVLFNBQVYsQ0FBWjtBQUNBLE1BQUlBLFVBQVUsSUFBVixJQUFrQixDQUFDQSxNQUFNLENBQU4sQ0FBdkIsRUFBaUM7QUFDaEMsUUFBS0MsSUFBTCxHQUFZTCxHQUFaO0FBQ0EsR0FGRCxNQUVPO0FBQ04sUUFBS0ssSUFBTCxHQUFZRCxNQUFNLENBQU4sQ0FBWjtBQUNBO0FBQ0Q7Ozs7MkJBRVFFLEssRUFBTztBQUNmLFFBQUtDLE1BQUwsR0FBY0QsS0FBZDtBQUNBOzs7MkJBRVE7QUFDUixVQUFPLEtBQUtELElBQVo7QUFDQTs7OzRCQUVTO0FBQ1QsVUFBTyxLQUFLRixLQUFaO0FBQ0E7OztnQ0FFYTtBQUNiLFVBQU8sS0FBS0EsS0FBTCxDQUFXRCxRQUFsQjtBQUNBOzs7a0NBRWU7QUFDZixVQUFPLEtBQUtDLEtBQUwsQ0FBV0YsVUFBbEI7QUFDQTs7OzZCQUVVO0FBQ1Y7QUFDQSxPQUFJRyxRQUFRLEtBQUtDLElBQUwsQ0FBVUQsS0FBVixDQUFnQixRQUFoQixDQUFaOztBQUVBLE9BQUlBLFVBQVUsSUFBVixJQUFrQixDQUFDQSxNQUFNLENBQU4sQ0FBdkIsRUFBaUM7QUFDaEMsV0FBTyxFQUFQO0FBQ0E7O0FBRUQsVUFBT04sT0FBT00sTUFBTSxDQUFOLENBQVAsQ0FBUDtBQUNBOzs7Z0NBRWE7QUFDYixPQUFJSSxXQUFXLElBQWY7QUFDQSxPQUFJLE9BQU9DLE9BQU9DLFFBQVAsQ0FBZ0JGLFFBQXZCLEtBQW9DLFFBQXhDLEVBQWtEO0FBQ2pEQSxlQUFXQyxPQUFPQyxRQUFQLENBQWdCRixRQUEzQjtBQUNBOztBQUVELFVBQU9BLFFBQVA7QUFDQTs7O2dDQUVhO0FBQ2IsT0FBSUcsUUFBUSxJQUFaO0FBQ0EsT0FBSSxPQUFPRixPQUFPQyxRQUFQLENBQWdCRSxRQUF2QixLQUFvQyxRQUF4QyxFQUFrRDtBQUNqREQsWUFBUUYsT0FBT0MsUUFBUCxDQUFnQkUsUUFBaEIsQ0FBeUJDLE9BQXpCLENBQWlDLElBQWpDLEVBQXNDLEVBQXRDLENBQVI7QUFDQTs7QUFFRCxVQUFPRixLQUFQO0FBQ0E7Ozs4QkFFVztBQUNYLFVBQVEsWUFBWSxLQUFLRyxXQUFMLEVBQXBCO0FBQ0E7OzttQ0FFZ0I7QUFDaEIsVUFBTyxLQUFLUCxNQUFMLENBQVlRLE1BQW5CO0FBQ0E7Ozs4QkFFVztBQUNYO0FBQ0E7QUFDQSxVQUFPLEtBQVA7QUFDQTs7O2lDQUVjO0FBQ2QsVUFBTyxLQUFLUixNQUFMLENBQVlTLElBQW5CO0FBQ0E7QUFDRDs7OztnQ0FDY0EsSSxFQUFNO0FBQ25CO0FBQ0E7OzttQ0FFZ0IsQ0FFaEI7QUFEQTs7QUFFRDs7Ozs0QkFDVUEsSSxFQUFNO0FBQ2YsVUFBTyxLQUFLQyxVQUFMLEdBQWtCRCxJQUFsQixDQUFQO0FBQ0E7OzsrQkFFWTs7QUFFWixVQUFPcEIsT0FBT3NCLEtBQVAsQ0FBYUMsU0FBU3ZCLE1BQXRCLENBQVA7QUFDQTs7OzRCQUVTO0FBQ1R3QixXQUFRQyxLQUFSLENBQWMsd0NBQWQ7QUFDQTs7Ozs7O0FBSUZDLE9BQU9DLE9BQVAsR0FBaUJ4QixhQUFqQiIsImZpbGUiOiJDbGllbnRSZXF1ZXN0LmpzIiwic291cmNlc0NvbnRlbnQiOlsidmFyIGNvb2tpZSA9IHJlcXVpcmUoXCJjb29raWVcIiksXG5cdGRlY29kZSA9IHJlcXVpcmUoXCJxdWVyeXN0cmluZy9kZWNvZGVcIik7XG5cbi8qKlxuICogVGhpcyBjbGFzcyBpbXBsZW1lbnRzIHRoZSByZWFjdC1zZXJ2ZXIgcmVxdWVzdCBBUEkgZm9yIGNsaWVudC1zaWRlIHRyYW5zaXRpb25zLlxuICovXG5jbGFzcyBDbGllbnRSZXF1ZXN0IHtcblxuXHRjb25zdHJ1Y3Rvcih1cmwsIHtcblx0XHRidW5kbGVEYXRhLFxuXHRcdHJldXNlRG9tLFxuXHR9PXt9KSB7XG5cdFx0dGhpcy5fb3B0cyA9IHtcblx0XHRcdGJ1bmRsZURhdGEsXG5cdFx0XHRyZXVzZURvbSxcblx0XHR9XG5cblx0XHQvLyBDaG9wIG9mZiB0aGUgZnJhZ21lbnQgaWRlbnRpZmllciBmcm9tIHRoZSB1cmwgaS5lIGV2ZXJ5dGhpbmcgZnJvbSB0aGUgIyB0byB0aGUgZW5kIG9mIHRoZSB1cmxcblx0XHQvLyBpZiBpdCBleGlzdHMgdG8gbWFrZSB0aGlzIGNvbnNpc3RlbnQgd2l0aCBFeHByZXNzU2VydmVyUmVxdWVzdC5cblx0XHR2YXIgbWF0Y2ggPSB1cmwubWF0Y2goLyhbXiNdKikvKTtcblx0XHRpZiAobWF0Y2ggPT09IG51bGwgfHwgIW1hdGNoWzFdKSB7XG5cdFx0XHR0aGlzLl91cmwgPSB1cmxcblx0XHR9IGVsc2Uge1xuXHRcdFx0dGhpcy5fdXJsID0gbWF0Y2hbMV07XG5cdFx0fVxuXHR9XG5cblx0c2V0Um91dGUocm91dGUpIHtcblx0XHR0aGlzLl9yb3V0ZSA9IHJvdXRlO1xuXHR9XG5cblx0Z2V0VXJsKCkge1xuXHRcdHJldHVybiB0aGlzLl91cmw7XG5cdH1cblxuXHRnZXRPcHRzKCkge1xuXHRcdHJldHVybiB0aGlzLl9vcHRzO1xuXHR9XG5cblx0Z2V0UmV1c2VEb20oKSB7XG5cdFx0cmV0dXJuIHRoaXMuX29wdHMucmV1c2VEb207XG5cdH1cblxuXHRnZXRCdW5kbGVEYXRhKCkge1xuXHRcdHJldHVybiB0aGlzLl9vcHRzLmJ1bmRsZURhdGE7XG5cdH1cblxuXHRnZXRRdWVyeSgpIHtcblx0XHQvLyBHcmFiIGZyYWdtZW50IGFmdGVyIGZpcnN0IFwiP1wiXG5cdFx0dmFyIG1hdGNoID0gdGhpcy5fdXJsLm1hdGNoKC9cXD8oLiopLyk7XG5cblx0XHRpZiAobWF0Y2ggPT09IG51bGwgfHwgIW1hdGNoWzFdKSB7XG5cdFx0XHRyZXR1cm4ge307XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGRlY29kZShtYXRjaFsxXSk7XG5cdH1cblxuXHRnZXRIb3N0bmFtZSgpIHtcblx0XHR2YXIgaG9zdG5hbWUgPSBudWxsO1xuXHRcdGlmICh0eXBlb2Ygd2luZG93LmxvY2F0aW9uLmhvc3RuYW1lID09PSBcInN0cmluZ1wiKSB7XG5cdFx0XHRob3N0bmFtZSA9IHdpbmRvdy5sb2NhdGlvbi5ob3N0bmFtZTtcblx0XHR9XG5cblx0XHRyZXR1cm4gaG9zdG5hbWU7XG5cdH1cblxuXHRnZXRQcm90b2NvbCgpIHtcblx0XHR2YXIgcHJvdG8gPSBudWxsO1xuXHRcdGlmICh0eXBlb2Ygd2luZG93LmxvY2F0aW9uLnByb3RvY29sID09PSBcInN0cmluZ1wiKSB7XG5cdFx0XHRwcm90byA9IHdpbmRvdy5sb2NhdGlvbi5wcm90b2NvbC5yZXBsYWNlKC86L2csJycpO1xuXHRcdH1cblxuXHRcdHJldHVybiBwcm90bztcblx0fVxuXG5cdGdldFNlY3VyZSgpIHtcblx0XHRyZXR1cm4gKCdodHRwcycgPT09IHRoaXMuZ2V0UHJvdG9jb2woKSk7XG5cdH1cblxuXHRnZXRSb3V0ZVBhcmFtcygpIHtcblx0XHRyZXR1cm4gdGhpcy5fcm91dGUucGFyYW1zO1xuXHR9XG5cblx0Z2V0TWV0aG9kKCkge1xuXHRcdC8vIEkgYmVsaWV2ZSB0aGF0IGNsaWVudC1zaWRlIHRyYW5zaXRpb25zIHNob3VsZCBhbHdheXMgYmVcblx0XHQvLyBIVFRQIEdFVHMgLXNyYS5cblx0XHRyZXR1cm4gXCJnZXRcIjtcblx0fVxuXG5cdGdldFJvdXRlTmFtZSgpIHtcblx0XHRyZXR1cm4gdGhpcy5fcm91dGUubmFtZTtcblx0fVxuXHQvKmVzbGludC1kaXNhYmxlIG5vLXVudXNlZC12YXJzICovXG5cdGdldEh0dHBIZWFkZXIobmFtZSkge1xuXHRcdC8vIHRoaXMgaXMgYSBuby1vcDsgdGhlcmUgYXJlIG5vIEhUVFAgaGVhZGVycyBvbiB0aGUgY2xpZW50LXNpZGUuXG5cdH1cblxuXHRnZXRIdHRwSGVhZGVycygpIHtcblx0XHQvLyB0aGlzIGlzIGEgbm8tb3A7IHRoZXJlIGFyZSBubyBIVFRQIGhlYWRlcnMgb24gdGhlIGNsaWVudC1zaWRlLlxuXHR9XG5cdC8qZXNsaW50LWVuYWJsZSBuby11bnVzZWQtdmFycyAqL1xuXHRnZXRDb29raWUobmFtZSkge1xuXHRcdHJldHVybiB0aGlzLmdldENvb2tpZXMoKVtuYW1lXTtcblx0fVxuXG5cdGdldENvb2tpZXMoKSB7XG5cblx0XHRyZXR1cm4gY29va2llLnBhcnNlKGRvY3VtZW50LmNvb2tpZSk7XG5cdH1cblxuXHRnZXRCb2R5KCkge1xuXHRcdGNvbnNvbGUuZXJyb3IoXCJDbGllbnRSZXF1ZXN0LmdldEJvZHkgbm90IGltcGxlbWVudGVkLlwiKTtcblx0fVxuXG59XG5cbm1vZHVsZS5leHBvcnRzID0gQ2xpZW50UmVxdWVzdDtcbiJdfQ==
