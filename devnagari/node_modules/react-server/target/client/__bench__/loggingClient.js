"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _benchmark = require("benchmark");

var _client = require("../logging/client");

var _client2 = _interopRequireDefault(_client);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var n = 1000;

var enclosedDeferred = void 0;

var NoopTransport = function () {
	function NoopTransport() {
		_classCallCheck(this, NoopTransport);

		this.name = 'noop';
		this.level = 'info';
	}

	_createClass(NoopTransport, [{
		key: "log",
		value: function log(level, msg, meta, callback) {
			if (meta === n || meta.ms === n) {
				enclosedDeferred.resolve();
			}
			callback(null, true);
		}
	}]);

	return NoopTransport;
}();

var NoopTimeTransport = function (_NoopTransport) {
	_inherits(NoopTimeTransport, _NoopTransport);

	function NoopTimeTransport() {
		_classCallCheck(this, NoopTimeTransport);

		var _this = _possibleConstructorReturn(this, (NoopTimeTransport.__proto__ || Object.getPrototypeOf(NoopTimeTransport)).call(this));

		_this.level = 'fast';
		return _this;
	}

	return NoopTimeTransport;
}(NoopTransport);

var noTransportLogger = _client2.default.getLogger({ name: "noTransports" });
var noopTransportLogger = _client2.default.getLogger({ name: "noopTransport" });

noopTransportLogger.add(NoopTransport);
noopTransportLogger.timeLogger.add(NoopTimeTransport);

function run(logger, method) {
	return function (deferred) {
		enclosedDeferred = deferred;
		for (var i = 1; i <= n; i++) {
			logger[method]("test", i);
		}
	};
}

new _benchmark.Suite().add("info no transports", run(noTransportLogger, 'info')).add("info noop transport", run(noopTransportLogger, 'info'), { defer: true }).add("time no transports", run(noTransportLogger, 'time')).add("time noop transport", run(noopTransportLogger, 'time'), { defer: true }).on('cycle', function (v) {
	return console.log(v.target.name + "\t" + v.target.stats.mean);
}).run();
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIl9fYmVuY2hfXy9sb2dnaW5nQ2xpZW50LmpzIl0sIm5hbWVzIjpbIm4iLCJlbmNsb3NlZERlZmVycmVkIiwiTm9vcFRyYW5zcG9ydCIsIm5hbWUiLCJsZXZlbCIsIm1zZyIsIm1ldGEiLCJjYWxsYmFjayIsIm1zIiwicmVzb2x2ZSIsIk5vb3BUaW1lVHJhbnNwb3J0Iiwibm9UcmFuc3BvcnRMb2dnZXIiLCJnZXRMb2dnZXIiLCJub29wVHJhbnNwb3J0TG9nZ2VyIiwiYWRkIiwidGltZUxvZ2dlciIsInJ1biIsImxvZ2dlciIsIm1ldGhvZCIsImRlZmVycmVkIiwiaSIsImRlZmVyIiwib24iLCJ2IiwiY29uc29sZSIsImxvZyIsInRhcmdldCIsInN0YXRzIiwibWVhbiJdLCJtYXBwaW5ncyI6Ijs7OztBQUFBOztBQUNBOzs7Ozs7Ozs7Ozs7QUFFQSxJQUFNQSxJQUFJLElBQVY7O0FBRUEsSUFBSUMseUJBQUo7O0lBRU1DLGE7QUFDTCwwQkFBYztBQUFBOztBQUNiLE9BQUtDLElBQUwsR0FBWSxNQUFaO0FBQ0EsT0FBS0MsS0FBTCxHQUFhLE1BQWI7QUFDQTs7OztzQkFFR0EsSyxFQUFPQyxHLEVBQUtDLEksRUFBTUMsUSxFQUFVO0FBQy9CLE9BQUlELFNBQVNOLENBQVQsSUFBY00sS0FBS0UsRUFBTCxLQUFZUixDQUE5QixFQUFpQztBQUNoQ0MscUJBQWlCUSxPQUFqQjtBQUNBO0FBQ0RGLFlBQVMsSUFBVCxFQUFlLElBQWY7QUFDQTs7Ozs7O0lBR0lHLGlCOzs7QUFDTCw4QkFBYztBQUFBOztBQUFBOztBQUViLFFBQUtOLEtBQUwsR0FBYSxNQUFiO0FBRmE7QUFHYjs7O0VBSjhCRixhOztBQU9oQyxJQUFNUyxvQkFBc0IsaUJBQVFDLFNBQVIsQ0FBa0IsRUFBQ1QsTUFBTSxjQUFQLEVBQWxCLENBQTVCO0FBQ0EsSUFBTVUsc0JBQXNCLGlCQUFRRCxTQUFSLENBQWtCLEVBQUNULE1BQU0sZUFBUCxFQUFsQixDQUE1Qjs7QUFFQVUsb0JBQW9CQyxHQUFwQixDQUF3QlosYUFBeEI7QUFDQVcsb0JBQW9CRSxVQUFwQixDQUErQkQsR0FBL0IsQ0FBbUNKLGlCQUFuQzs7QUFFQSxTQUFTTSxHQUFULENBQWFDLE1BQWIsRUFBcUJDLE1BQXJCLEVBQTZCO0FBQzVCLFFBQU8sVUFBU0MsUUFBVCxFQUFtQjtBQUN6QmxCLHFCQUFtQmtCLFFBQW5CO0FBQ0EsT0FBSyxJQUFJQyxJQUFJLENBQWIsRUFBZ0JBLEtBQUtwQixDQUFyQixFQUF3Qm9CLEdBQXhCLEVBQTZCO0FBQzVCSCxVQUFPQyxNQUFQLEVBQWUsTUFBZixFQUF1QkUsQ0FBdkI7QUFDQTtBQUNELEVBTEQ7QUFNQTs7QUFFRCx1QkFDRU4sR0FERixDQUNNLG9CQUROLEVBQzZCRSxJQUFJTCxpQkFBSixFQUF5QixNQUF6QixDQUQ3QixFQUVFRyxHQUZGLENBRU0scUJBRk4sRUFFNkJFLElBQUlILG1CQUFKLEVBQXlCLE1BQXpCLENBRjdCLEVBRStELEVBQUVRLE9BQU8sSUFBVCxFQUYvRCxFQUdFUCxHQUhGLENBR00sb0JBSE4sRUFHNkJFLElBQUlMLGlCQUFKLEVBQXlCLE1BQXpCLENBSDdCLEVBSUVHLEdBSkYsQ0FJTSxxQkFKTixFQUk2QkUsSUFBSUgsbUJBQUosRUFBeUIsTUFBekIsQ0FKN0IsRUFJK0QsRUFBRVEsT0FBTyxJQUFULEVBSi9ELEVBS0VDLEVBTEYsQ0FLSyxPQUxMLEVBS2MsVUFBQ0MsQ0FBRDtBQUFBLFFBQU9DLFFBQVFDLEdBQVIsQ0FBWUYsRUFBRUcsTUFBRixDQUFTdkIsSUFBVCxHQUFnQixJQUFoQixHQUF1Qm9CLEVBQUVHLE1BQUYsQ0FBU0MsS0FBVCxDQUFlQyxJQUFsRCxDQUFQO0FBQUEsQ0FMZCxFQU1FWixHQU5GIiwiZmlsZSI6Il9fYmVuY2hfXy9sb2dnaW5nQ2xpZW50LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtTdWl0ZX0gZnJvbSBcImJlbmNobWFya1wiO1xuaW1wb3J0IGxvZ2dpbmcgZnJvbSBcIi4uL2xvZ2dpbmcvY2xpZW50XCI7XG5cbmNvbnN0IG4gPSAxMDAwO1xuXG5sZXQgZW5jbG9zZWREZWZlcnJlZDtcblxuY2xhc3MgTm9vcFRyYW5zcG9ydCB7XG5cdGNvbnN0cnVjdG9yKCkge1xuXHRcdHRoaXMubmFtZSA9ICdub29wJztcblx0XHR0aGlzLmxldmVsID0gJ2luZm8nO1xuXHR9XG5cblx0bG9nKGxldmVsLCBtc2csIG1ldGEsIGNhbGxiYWNrKSB7XG5cdFx0aWYgKG1ldGEgPT09IG4gfHwgbWV0YS5tcyA9PT0gbikge1xuXHRcdFx0ZW5jbG9zZWREZWZlcnJlZC5yZXNvbHZlKCk7XG5cdFx0fVxuXHRcdGNhbGxiYWNrKG51bGwsIHRydWUpO1xuXHR9XG59XG5cbmNsYXNzIE5vb3BUaW1lVHJhbnNwb3J0IGV4dGVuZHMgTm9vcFRyYW5zcG9ydCB7XG5cdGNvbnN0cnVjdG9yKCkge1xuXHRcdHN1cGVyKCk7XG5cdFx0dGhpcy5sZXZlbCA9ICdmYXN0Jztcblx0fVxufVxuXG5jb25zdCBub1RyYW5zcG9ydExvZ2dlciAgID0gbG9nZ2luZy5nZXRMb2dnZXIoe25hbWU6IFwibm9UcmFuc3BvcnRzXCJ9KTtcbmNvbnN0IG5vb3BUcmFuc3BvcnRMb2dnZXIgPSBsb2dnaW5nLmdldExvZ2dlcih7bmFtZTogXCJub29wVHJhbnNwb3J0XCJ9KTtcblxubm9vcFRyYW5zcG9ydExvZ2dlci5hZGQoTm9vcFRyYW5zcG9ydClcbm5vb3BUcmFuc3BvcnRMb2dnZXIudGltZUxvZ2dlci5hZGQoTm9vcFRpbWVUcmFuc3BvcnQpXG5cbmZ1bmN0aW9uIHJ1bihsb2dnZXIsIG1ldGhvZCkge1xuXHRyZXR1cm4gZnVuY3Rpb24oZGVmZXJyZWQpIHtcblx0XHRlbmNsb3NlZERlZmVycmVkID0gZGVmZXJyZWQ7XG5cdFx0Zm9yICh2YXIgaSA9IDE7IGkgPD0gbjsgaSsrKSB7XG5cdFx0XHRsb2dnZXJbbWV0aG9kXShcInRlc3RcIiwgaSk7XG5cdFx0fVxuXHR9XG59XG5cbm5ldyBTdWl0ZSgpXG5cdC5hZGQoXCJpbmZvIG5vIHRyYW5zcG9ydHNcIiwgIHJ1bihub1RyYW5zcG9ydExvZ2dlciwgICAnaW5mbycpKVxuXHQuYWRkKFwiaW5mbyBub29wIHRyYW5zcG9ydFwiLCBydW4obm9vcFRyYW5zcG9ydExvZ2dlciwgJ2luZm8nKSwgeyBkZWZlcjogdHJ1ZSB9KVxuXHQuYWRkKFwidGltZSBubyB0cmFuc3BvcnRzXCIsICBydW4obm9UcmFuc3BvcnRMb2dnZXIsICAgJ3RpbWUnKSlcblx0LmFkZChcInRpbWUgbm9vcCB0cmFuc3BvcnRcIiwgcnVuKG5vb3BUcmFuc3BvcnRMb2dnZXIsICd0aW1lJyksIHsgZGVmZXI6IHRydWUgfSlcblx0Lm9uKCdjeWNsZScsICh2KSA9PiBjb25zb2xlLmxvZyh2LnRhcmdldC5uYW1lICsgXCJcXHRcIiArIHYudGFyZ2V0LnN0YXRzLm1lYW4pKVxuXHQucnVuKClcbiJdfQ==
