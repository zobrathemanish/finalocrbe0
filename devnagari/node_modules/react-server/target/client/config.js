"use strict";

/**
 * Thin wrapper around the environment-specific configuration file
 */

var config = null;

if (false) {

	module.exports = function () {
		// only read out the config once, and then cache it. -sra.
		if (null === config) {

			//eslint-disable-next-line no-process-env
			if (process.env.REACT_SERVER_CONFIGS) {
				var path = require('path');
				//eslint-disable-next-line no-process-env
				var configFilePath = process.env.REACT_SERVER_CONFIGS;

				// Node.js tries to load `config.js` file first. If `config.js` doesn't exist, Node.js
				// then try to load `config.json`.
				//
				// If `configFilePath` is absolute `require.resolve` will
				// reset to it, correctly overriding `process.cwd()`.  If it
				// is relative, then it will be relative to `process.cwd()`.
				//
				configFilePath = path.resolve(process.cwd(), configFilePath, "config");
				config = Object.freeze(require(configFilePath));
			} else {
				config = Object.freeze({});
			}
		}
		return config;
	};
} else {

	// I'm not entirely clear why this code is here; it seems to just copy all the key & values from inputEnv;
	// I'm not clear why the client wouldn't just use inputEnv.
	var env = {

		rehydrate: function rehydrate(inputEnv) {
			Object.keys(inputEnv).forEach(function (key) {
				env[key] = inputEnv[key];
			});

			// janky: remove the 'rehydrate' method from
			// the environment module after it's used
			delete env.rehydrate;
		}
	};

	module.exports = function () {
		return env;
	};
}
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbmZpZy5qcyJdLCJuYW1lcyI6WyJjb25maWciLCJtb2R1bGUiLCJleHBvcnRzIiwicHJvY2VzcyIsImVudiIsIlJFQUNUX1NFUlZFUl9DT05GSUdTIiwicGF0aCIsInJlcXVpcmUiLCJjb25maWdGaWxlUGF0aCIsInJlc29sdmUiLCJjd2QiLCJPYmplY3QiLCJmcmVlemUiLCJyZWh5ZHJhdGUiLCJpbnB1dEVudiIsImtleXMiLCJmb3JFYWNoIiwia2V5Il0sIm1hcHBpbmdzIjoiOztBQUFBOzs7O0FBSUEsSUFBSUEsU0FBUyxJQUFiOztBQUVBLElBQUksS0FBSixFQUFXOztBQUVWQyxRQUFPQyxPQUFQLEdBQWlCLFlBQVk7QUFDNUI7QUFDQSxNQUFJLFNBQVNGLE1BQWIsRUFBcUI7O0FBRXBCO0FBQ0EsT0FBSUcsUUFBUUMsR0FBUixDQUFZQyxvQkFBaEIsRUFBc0M7QUFDckMsUUFBSUMsT0FBT0MsUUFBUSxNQUFSLENBQVg7QUFDQTtBQUNBLFFBQUlDLGlCQUFpQkwsUUFBUUMsR0FBUixDQUFZQyxvQkFBakM7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQUcscUJBQWlCRixLQUFLRyxPQUFMLENBQWFOLFFBQVFPLEdBQVIsRUFBYixFQUE0QkYsY0FBNUIsRUFBNEMsUUFBNUMsQ0FBakI7QUFDQVIsYUFBU1csT0FBT0MsTUFBUCxDQUFjTCxRQUFRQyxjQUFSLENBQWQsQ0FBVDtBQUNBLElBZEQsTUFjTztBQUNOUixhQUFTVyxPQUFPQyxNQUFQLENBQWMsRUFBZCxDQUFUO0FBQ0E7QUFDRDtBQUNELFNBQU9aLE1BQVA7QUFDQSxFQXhCRDtBQTBCQSxDQTVCRCxNQTRCTzs7QUFFTjtBQUNBO0FBQ0EsS0FBSUksTUFBTTs7QUFFVFMsYUFBVyxtQkFBVUMsUUFBVixFQUFvQjtBQUM5QkgsVUFBT0ksSUFBUCxDQUFZRCxRQUFaLEVBQXNCRSxPQUF0QixDQUErQixlQUFPO0FBQ3JDWixRQUFJYSxHQUFKLElBQVdILFNBQVNHLEdBQVQsQ0FBWDtBQUNBLElBRkQ7O0FBSUE7QUFDQTtBQUNBLFVBQU9iLElBQUlTLFNBQVg7QUFDQTtBQVZRLEVBQVY7O0FBYUFaLFFBQU9DLE9BQVAsR0FBaUIsWUFBWTtBQUM1QixTQUFPRSxHQUFQO0FBQ0EsRUFGRDtBQUdBIiwiZmlsZSI6ImNvbmZpZy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogVGhpbiB3cmFwcGVyIGFyb3VuZCB0aGUgZW52aXJvbm1lbnQtc3BlY2lmaWMgY29uZmlndXJhdGlvbiBmaWxlXG4gKi9cblxudmFyIGNvbmZpZyA9IG51bGw7XG5cbmlmIChmYWxzZSkge1xuXG5cdG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKCkge1xuXHRcdC8vIG9ubHkgcmVhZCBvdXQgdGhlIGNvbmZpZyBvbmNlLCBhbmQgdGhlbiBjYWNoZSBpdC4gLXNyYS5cblx0XHRpZiAobnVsbCA9PT0gY29uZmlnKSB7XG5cblx0XHRcdC8vZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXByb2Nlc3MtZW52XG5cdFx0XHRpZiAocHJvY2Vzcy5lbnYuUkVBQ1RfU0VSVkVSX0NPTkZJR1MpIHtcblx0XHRcdFx0dmFyIHBhdGggPSByZXF1aXJlKCdwYXRoJyk7XG5cdFx0XHRcdC8vZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXByb2Nlc3MtZW52XG5cdFx0XHRcdHZhciBjb25maWdGaWxlUGF0aCA9IHByb2Nlc3MuZW52LlJFQUNUX1NFUlZFUl9DT05GSUdTO1xuXG5cdFx0XHRcdC8vIE5vZGUuanMgdHJpZXMgdG8gbG9hZCBgY29uZmlnLmpzYCBmaWxlIGZpcnN0LiBJZiBgY29uZmlnLmpzYCBkb2Vzbid0IGV4aXN0LCBOb2RlLmpzXG5cdFx0XHRcdC8vIHRoZW4gdHJ5IHRvIGxvYWQgYGNvbmZpZy5qc29uYC5cblx0XHRcdFx0Ly9cblx0XHRcdFx0Ly8gSWYgYGNvbmZpZ0ZpbGVQYXRoYCBpcyBhYnNvbHV0ZSBgcmVxdWlyZS5yZXNvbHZlYCB3aWxsXG5cdFx0XHRcdC8vIHJlc2V0IHRvIGl0LCBjb3JyZWN0bHkgb3ZlcnJpZGluZyBgcHJvY2Vzcy5jd2QoKWAuICBJZiBpdFxuXHRcdFx0XHQvLyBpcyByZWxhdGl2ZSwgdGhlbiBpdCB3aWxsIGJlIHJlbGF0aXZlIHRvIGBwcm9jZXNzLmN3ZCgpYC5cblx0XHRcdFx0Ly9cblx0XHRcdFx0Y29uZmlnRmlsZVBhdGggPSBwYXRoLnJlc29sdmUocHJvY2Vzcy5jd2QoKSwgY29uZmlnRmlsZVBhdGgsIFwiY29uZmlnXCIpO1xuXHRcdFx0XHRjb25maWcgPSBPYmplY3QuZnJlZXplKHJlcXVpcmUoY29uZmlnRmlsZVBhdGgpKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGNvbmZpZyA9IE9iamVjdC5mcmVlemUoe30pO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRyZXR1cm4gY29uZmlnO1xuXHR9O1xuXG59IGVsc2Uge1xuXG5cdC8vIEknbSBub3QgZW50aXJlbHkgY2xlYXIgd2h5IHRoaXMgY29kZSBpcyBoZXJlOyBpdCBzZWVtcyB0byBqdXN0IGNvcHkgYWxsIHRoZSBrZXkgJiB2YWx1ZXMgZnJvbSBpbnB1dEVudjtcblx0Ly8gSSdtIG5vdCBjbGVhciB3aHkgdGhlIGNsaWVudCB3b3VsZG4ndCBqdXN0IHVzZSBpbnB1dEVudi5cblx0dmFyIGVudiA9IHtcblxuXHRcdHJlaHlkcmF0ZTogZnVuY3Rpb24gKGlucHV0RW52KSB7XG5cdFx0XHRPYmplY3Qua2V5cyhpbnB1dEVudikuZm9yRWFjaCgga2V5ID0+IHtcblx0XHRcdFx0ZW52W2tleV0gPSBpbnB1dEVudltrZXldO1xuXHRcdFx0fSk7XG5cblx0XHRcdC8vIGphbmt5OiByZW1vdmUgdGhlICdyZWh5ZHJhdGUnIG1ldGhvZCBmcm9tXG5cdFx0XHQvLyB0aGUgZW52aXJvbm1lbnQgbW9kdWxlIGFmdGVyIGl0J3MgdXNlZFxuXHRcdFx0ZGVsZXRlIGVudi5yZWh5ZHJhdGU7XG5cdFx0fSxcblx0fTtcblxuXHRtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICgpIHtcblx0XHRyZXR1cm4gZW52O1xuXHR9O1xufVxuIl19
