"use strict";

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var RLS = require('./util/RequestLocalStorage').getNamespace(),
    Cache = require("./ReactServerAgent/Cache"),
    Request = require("./ReactServerAgent/Request"),
    Plugins = require("./ReactServerAgent/Plugins");

var DATA_BUNDLE_PARAMETER = '_react_server_data_bundle';
var DATA_BUNDLE_OPTS = _defineProperty({}, DATA_BUNDLE_PARAMETER, 1);

var API = {

	DATA_BUNDLE_PARAMETER: DATA_BUNDLE_PARAMETER,

	get: function get(url, data) {
		var req = new Request('GET', url, API.cache());
		if (data) req.query(data);
		return req;
	},
	head: function head(url, data) {
		var req = new Request('HEAD', url, API.cache());
		if (data) req.query(data);
		return req;
	},
	del: function del(url, data) {
		var req = new Request('DELETE', url, API.cache());
		if (data) req.send(data);
		return req;
	},
	patch: function patch(url, data) {
		var req = new Request('PATCH', url, API.cache());
		if (data) req.send(data);
		return req;
	},
	post: function post(url, data) {
		var req = new Request('POST', url, API.cache());
		if (data) req.send(data);
		return req;
	},
	put: function put(url, data) {
		var req = new Request('PUT', url, API.cache());
		if (data) req.send(data);
		return req;
	},


	/**
  * Exposes the ReactServerAgent request data cache from RequestLocalStorage.
  */
	cache: function cache() {
		var cache = RLS().cache;
		if (!cache) {
			cache = RLS().cache = new Cache();
		}
		return cache;
	},
	_clearCache: function _clearCache() {
		delete RLS().cache;
	},


	/**
  * Adds a plugin function that can be used to modify the Request
  * object before the request is actually
  * triggered.
  *
  * The callback function will take the Request instance as a parameter:
  * ```
  * var defaultHeaders = { ... };
  * ReactServerAgent.plugRequest(function (request) {
  *     // e.g.
  *     request.set(defaultHeaders)
  * })
  * ```
  */
	plugRequest: function plugRequest(pluginFunc) {
		Plugins.forRequest().add(pluginFunc);
	},


	/**
  * Adds a plugin function that can be used to modify the response
  * object before it is passed the caller's callback.
  *
  * The callback function will take err and response as parameters
  * (like the callback to `end()`), and the request as well:
  * ```
  * ReactServerAgent.plugResponse(function (err, response, request) {
  *     // e.g.
  *     console.log("Response received!", res.body);
  *     res.wasLogged = true; // or whatever
  * })
  * ```
  */
	plugResponse: function plugResponse(pluginFunc) {
		Plugins.forResponse().add(pluginFunc);
	},
	_fetchDataBundle: function _fetchDataBundle(url) {
		return API.get(url, DATA_BUNDLE_OPTS).then(function (data) {
			return JSON.stringify(data.body);
		});
	},
	_rehydrateDataBundle: function _rehydrateDataBundle(data) {
		API.cache().rehydrate(JSON.parse(data));
	}
};

module.exports = API;
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIlJlYWN0U2VydmVyQWdlbnQuanMiXSwibmFtZXMiOlsiUkxTIiwicmVxdWlyZSIsImdldE5hbWVzcGFjZSIsIkNhY2hlIiwiUmVxdWVzdCIsIlBsdWdpbnMiLCJEQVRBX0JVTkRMRV9QQVJBTUVURVIiLCJEQVRBX0JVTkRMRV9PUFRTIiwiQVBJIiwiZ2V0IiwidXJsIiwiZGF0YSIsInJlcSIsImNhY2hlIiwicXVlcnkiLCJoZWFkIiwiZGVsIiwic2VuZCIsInBhdGNoIiwicG9zdCIsInB1dCIsIl9jbGVhckNhY2hlIiwicGx1Z1JlcXVlc3QiLCJwbHVnaW5GdW5jIiwiZm9yUmVxdWVzdCIsImFkZCIsInBsdWdSZXNwb25zZSIsImZvclJlc3BvbnNlIiwiX2ZldGNoRGF0YUJ1bmRsZSIsInRoZW4iLCJKU09OIiwic3RyaW5naWZ5IiwiYm9keSIsIl9yZWh5ZHJhdGVEYXRhQnVuZGxlIiwicmVoeWRyYXRlIiwicGFyc2UiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiOzs7O0FBQUEsSUFBSUEsTUFBTUMsUUFBUSw0QkFBUixFQUFzQ0MsWUFBdEMsRUFBVjtBQUFBLElBQ0VDLFFBQVFGLFFBQVEsMEJBQVIsQ0FEVjtBQUFBLElBRUVHLFVBQVVILFFBQVEsNEJBQVIsQ0FGWjtBQUFBLElBR0VJLFVBQVVKLFFBQVEsNEJBQVIsQ0FIWjs7QUFPQSxJQUFNSyx3QkFBd0IsMkJBQTlCO0FBQ0EsSUFBTUMsdUNBQTBCRCxxQkFBMUIsRUFBa0QsQ0FBbEQsQ0FBTjs7QUFFQSxJQUFJRSxNQUFNOztBQUVURiw2Q0FGUzs7QUFJVEcsSUFKUyxlQUlKQyxHQUpJLEVBSUNDLElBSkQsRUFJTztBQUNmLE1BQUlDLE1BQU0sSUFBSVIsT0FBSixDQUFZLEtBQVosRUFBbUJNLEdBQW5CLEVBQXdCRixJQUFJSyxLQUFKLEVBQXhCLENBQVY7QUFDQSxNQUFJRixJQUFKLEVBQVVDLElBQUlFLEtBQUosQ0FBVUgsSUFBVjtBQUNWLFNBQU9DLEdBQVA7QUFDQSxFQVJRO0FB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ZSgnLi91dGlsL1JlcXVlc3RMb2NhbFN0b3JhZ2UnKS5nZXROYW1lc3BhY2UoKVxuLFx0Q2FjaGUgPSByZXF1aXJlKFwiLi9SZWFjdFNlcnZlckFnZW50L0NhY2hlXCIpXG4sXHRSZXF1ZXN0ID0gcmVxdWlyZShcIi4vUmVhY3RTZXJ2ZXJBZ2VudC9SZXF1ZXN0XCIpXG4sXHRQbHVnaW5zID0gcmVxdWlyZShcIi4vUmVhY3RTZXJ2ZXJBZ2VudC9QbHVnaW5zXCIpXG47XG5cblxuY29uc3QgREFUQV9CVU5ETEVfUEFSQU1FVEVSID0gJ19yZWFjdF9zZXJ2ZXJfZGF0YV9idW5kbGUnO1xuY29uc3QgREFUQV9CVU5ETEVfT1BUUyAgICAgID0ge1tEQVRBX0JVTkRMRV9QQVJBTUVURVJdOiAxfTtcblxudmFyIEFQSSA9IHtcblxuXHREQVRBX0JVTkRMRV9QQVJBTUVURVIsXG5cblx0Z2V0ICh1cmwsIGRhdGEpIHtcblx0XHR2YXIgcmVxID0gbmV3IFJlcXVlc3QoJ0dFVCcsIHVybCwgQVBJLmNhY2hlKCkpO1xuXHRcdGlmIChkYXRhKSByZXEucXVlcnkoZGF0YSk7XG5cdFx0cmV0dXJuIHJlcTtcblx0fSxcblxuXHRoZWFkICh1cmwsIGRhdGEpIHtcblx0XHR2YXIgcmVxID0gbmV3IFJlcXVlc3QoJ0hFQUQnLCB1cmwsIEFQSS5jYWNoZSgpKTtcblx0XHRpZiAoZGF0YSkgcmVxLnF1ZXJ5KGRhdGEpO1xuXHRcdHJldHVybiByZXE7XG5cdH0sXG5cblx0ZGVsICh1cmwsIGRhdGEpIHtcblx0XHR2YXIgcmVxID0gbmV3IFJlcXVlc3QoJ0RFTEVURScsIHVybCwgQVBJLmNhY2hlKCkpO1xuXHRcdGlmIChkYXRhKSByZXEuc2VuZChkYXRhKTtcblx0XHRyZXR1cm4gcmVxO1xuXHR9LFxuXG5cdHBhdGNoICh1cmwsIGRhdGEpIHtcblx0XHR2YXIgcmVxID0gbmV3IFJlcXVlc3QoJ1BBVENIJywgdXJsLCBBUEkuY2FjaGUoKSk7XG5cdFx0aWYgKGRhdGEpIHJlcS5zZW5kKGRhdGEpO1xuXHRcdHJldHVybiByZXE7XG5cdH0sXG5cblx0cG9zdCAodXJsLCBkYXRhKSB7XG5cdFx0dmFyIHJlcSA9IG5ldyBSZXF1ZXN0KCdQT1NUJywgdXJsLCBBUEkuY2FjaGUoKSk7XG5cdFx0aWYgKGRhdGEpIHJlcS5zZW5kKGRhdGEpO1xuXHRcdHJldHVybiByZXE7XG5cdH0sXG5cblx0cHV0ICh1cmwsIGRhdGEpIHtcblx0XHR2YXIgcmVxID0gbmV3IFJlcXVlc3QoJ1BVVCcsIHVybCwgQVBJLmNhY2hlKCkpO1xuXHRcdGlmIChkYXRhKSByZXEuc2VuZChkYXRhKTtcblx0XHRyZXR1cm4gcmVxO1xuXHR9LFxuXG5cdC8qKlxuXHQgKiBFeHBvc2VzIHRoZSBSZWFjdFNlcnZlckFnZW50IHJlcXVlc3QgZGF0YSBjYWNoZSBmcm9tIFJlcXVlc3RMb2NhbFN0b3JhZ2UuXG5cdCAqL1xuXHRjYWNoZSAoKSB7XG5cdFx0dmFyIGNhY2hlID0gUkxTKCkuY2FjaGU7XG5cdFx0aWYgKCFjYWNoZSkge1xuXHRcdFx0Y2FjaGUgPSBSTFMoKS5jYWNoZSA9IG5ldyBDYWNoZSgpO1xuXHRcdH1cblx0XHRyZXR1cm4gY2FjaGU7XG5cdH0sXG5cblx0X2NsZWFyQ2FjaGUgKCkge1xuXHRcdGRlbGV0ZSBSTFMoKS5jYWNoZTtcblx0fSxcblxuXHQvKipcblx0ICogQWRkcyBhIHBsdWdpbiBmdW5jdGlvbiB0aGF0IGNhbiBiZSB1c2VkIHRvIG1vZGlmeSB0aGUgUmVxdWVzdFxuXHQgKiBvYmplY3QgYmVmb3JlIHRoZSByZXF1ZXN0IGlzIGFjdHVhbGx5XG5cdCAqIHRyaWdnZXJlZC5cblx0ICpcblx0ICogVGhlIGNhbGxiYWNrIGZ1bmN0aW9uIHdpbGwgdGFrZSB0aGUgUmVxdWVzdCBpbnN0YW5jZSBhcyBhIHBhcmFtZXRlcjpcblx0ICogYGBgXG5cdCAqIHZhciBkZWZhdWx0SGVhZGVycyA9IHsgLi4uIH07XG5cdCAqIFJlYWN0U2VydmVyQWdlbnQucGx1Z1JlcXVlc3QoZnVuY3Rpb24gKHJlcXVlc3QpIHtcblx0ICogICAgIC8vIGUuZy5cblx0ICogICAgIHJlcXVlc3Quc2V0KGRlZmF1bHRIZWFkZXJzKVxuXHQgKiB9KVxuXHQgKiBgYGBcblx0ICovXG5cdHBsdWdSZXF1ZXN0IChwbHVnaW5GdW5jKSB7XG5cdFx0UGx1Z2lucy5mb3JSZXF1ZXN0KCkuYWRkKHBsdWdpbkZ1bmMpO1xuXHR9LFxuXG5cdC8qKlxuXHQgKiBBZGRzIGEgcGx1Z2luIGZ1bmN0aW9uIHRoYXQgY2FuIGJlIHVzZWQgdG8gbW9kaWZ5IHRoZSByZXNwb25zZVxuXHQgKiBvYmplY3QgYmVmb3JlIGl0IGlzIHBhc3NlZCB0aGUgY2FsbGVyJ3MgY2FsbGJhY2suXG5cdCAqXG5cdCAqIFRoZSBjYWxsYmFjayBmdW5jdGlvbiB3aWxsIHRha2UgZXJyIGFuZCByZXNwb25zZSBhcyBwYXJhbWV0ZXJzXG5cdCAqIChsaWtlIHRoZSBjYWxsYmFjayB0byBgZW5kKClgKSwgYW5kIHRoZSByZXF1ZXN0IGFzIHdlbGw6XG5cdCAqIGBgYFxuXHQgKiBSZWFjdFNlcnZlckFnZW50LnBsdWdSZXNwb25zZShmdW5jdGlvbiAoZXJyLCByZXNwb25zZSwgcmVxdWVzdCkge1xuXHQgKiAgICAgLy8gZS5nLlxuXHQgKiAgICAgY29uc29sZS5sb2coXCJSZXNwb25zZSByZWNlaXZlZCFcIiwgcmVzLmJvZHkpO1xuXHQgKiAgICAgcmVzLndhc0xvZ2dlZCA9IHRydWU7IC8vIG9yIHdoYXRldmVyXG5cdCAqIH0pXG5cdCAqIGBgYFxuXHQgKi9cblx0cGx1Z1Jlc3BvbnNlIChwbHVnaW5GdW5jKSB7XG5cdFx0UGx1Z2lucy5mb3JSZXNwb25zZSgpLmFkZChwbHVnaW5GdW5jKTtcblx0fSxcblxuXHRfZmV0Y2hEYXRhQnVuZGxlKHVybCkge1xuXHRcdHJldHVybiBBUEkuZ2V0KHVybCwgREFUQV9CVU5ETEVfT1BUUykudGhlbihkYXRhID0+IEpTT04uc3RyaW5naWZ5KGRhdGEuYm9keSkpO1xuXHR9LFxuXG5cdF9yZWh5ZHJhdGVEYXRhQnVuZGxlKGRhdGEpIHtcblx0XHRBUEkuY2FjaGUoKS5yZWh5ZHJhdGUoSlNPTi5wYXJzZShkYXRhKSlcblx0fSxcblxufVxuXG5cblxubW9kdWxlLmV4cG9ydHMgPSBBUEk7XG4iXX0=
