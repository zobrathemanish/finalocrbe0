'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var EventEmitter = require('events').EventEmitter,
    logger = require('../logging').getLogger({ "name": "react-server.core.context.Navigator", "color": { "server": 85, "client": "rgb(42,212,127)" } }),
    Router = require('routr'),
    Q = require('q'),
    History = require("../components/History"),
    ReactServerAgent = require("../ReactServerAgent"),
    PageUtil = require("../util/PageUtil"),
    DebugUtil = require("../util/DebugUtil"),
    _ref = true ? require('../logging/response') : { setResponseLoggerPage: function setResponseLoggerPage() {} },
    setResponseLoggerPage = _ref.setResponseLoggerPage;

var Navigator = function (_EventEmitter) {
	_inherits(Navigator, _EventEmitter);

	function Navigator(context, routes) {
		_classCallCheck(this, Navigator);

		var _this = _possibleConstructorReturn(this, (Navigator.__proto__ || Object.getPrototypeOf(Navigator)).call(this));

		_this.router = new Router(routes.routes);
		_this.context = context;

		_this._globalMiddleware = routes.middleware;
		_this._loading = false;
		_this._currentRoute = null;
		_this._nextRoute = null;
		return _this;
	}

	/**
  * type is one of
  *    History.events.PUSHSTATE: user clicked something to go forward but browser didn't do a
  * full page load
  *    History.events.POPSTATE: user clicked back button but browser didn't do a full page load
  *    History.events.PAGELOAD: full browser page load, not using History API.
  *
  * Default is History.events.PAGELOAD.
  */


	_createClass(Navigator, [{
		key: 'navigate',
		value: function navigate(request, type) {
			var _this2 = this;

			logger.debug('Navigating to ' + request.getUrl());
			type = type || History.events.PAGELOAD;

			this._haveInitialized = true;

			// Pull debug parameters out of the query string and expose via a well
			// defined interface.
			DebugUtil.setRequest(request);

			var route = this.router.getRoute(request.getUrl(), { method: request.getMethod() });

			if (route) {
				logger.debug('Mapped ' + request.getUrl() + ' to route ' + route.name);
			} else {
				this.emit('navigateDone', { status: 404, message: "No Route!" }, null, request.getUrl(), type);
				return;
			}

			// We may or may not _actually_ start this route client side.
			//
			// If there's a flurry of navigation we skip any routes that
			// blow by while we're still working on a page, and only
			// finally start the _last_ one.
			//
			// The promise returned from `startRoute()` will be rejected
			// if we're not going to proceed, so resources will be freed.
			//
			this.startRoute(route, request, type)

			// We might have a data bundle on hand, or the request may
			// have asked us to fetch it one.
			.then(this._dealWithDataBundleLoading.bind(this, request)).then(function () {
				if (_this2._ignoreCurrentNavigation) {
					// This is a one-time deal.
					_this2._ignoreCurrentNavigation = false;
					return;
				}

				/* Breathe... */

				var loaders = route.config.page;

				var deviceType = _this2.context.getDeviceType();

				if (loaders[deviceType]) {
					route.name += "-" + deviceType;
				}

				// Our route may have multiple page implementations if
				// there are device-specific variations.
				//
				// We'll take one of those if the request device
				// matches, otherwise we'll use the default.
				//
				// Note that the page object may either directly be a
				// loader or it may be an object whose values are
				// loaders.
				(loaders[deviceType] || loaders.default || loaders)().done(function (pageConstructor) {
					if (request.setRoute) {
						request.setRoute(route);
					}
					_this2.handlePage(pageConstructor, request, type);
				}, function (err) {
					console.error("Error resolving page", err);
				});
			});
		}

		// If you call this you're responsible for calling `finishRoute()`
		// when you're done with whatever it is you're hiding from the
		// navigator.

	}, {
		key: 'ignoreCurrentNavigation',
		value: function ignoreCurrentNavigation() {
			this._ignoreCurrentNavigation = true;
		}
	}, {
		key: '_dealWithDataBundleLoading',
		value: function _dealWithDataBundleLoading(request) {

			// If we're managing a frame's navigation, we want _it_ to
			// use a data bundle.
			if (this._ignoreCurrentNavigation) return Q();

			// If this request doesn't use a data bundle, we're done.
			if (!request.getBundleData()) return Q();

			// If the request wants all of the data fetched as a bundle
			// we'll need to kick off the request for the bundle.
			return ReactServerAgent._fetchDataBundle(request.getUrl()).then(ReactServerAgent._rehydrateDataBundle).catch(function (err) {
				return logger.error('Data bundle error', err);
			});
		}
	}, {
		key: 'handlePage',
		value: function handlePage(pageConstructor, request, type) {
			var _this3 = this;

			// instantiate the pages we need to fulfill this request.
			var pageClasses = [];

			this._addPageMiddlewareToArray(this._globalMiddleware, pageClasses);
			this._addPageMiddlewareToArray([pageConstructor], pageClasses);

			var pages = pageClasses.map(function (pageClass) {
				if (Object.getOwnPropertyNames(pageClass).length === 0) {
					throw new Error("Tried to instantiate a page or middleware class that was an empty object. Did you forget to assign a class to module.exports?");
				}
				return new pageClass();
			});
			var page = PageUtil.createPageChain(pages);

			this.emit("page", page);

			page.setRequest(request);

			PageUtil.PageConfig.initFromPageWithDefaults(page, {
				isFragment: false,
				isRawResponse: false
			});

			// Set the page context on the response logger so it can figure
			// out whether to flush logs to the response document
			setResponseLoggerPage(page);

			// call page.handleRoute(), and use the resulting code to decide how to
			// respond.
			// We call it in a promise handler so any exception that
			// arises will get converted to a rejection that we can handle
			// below.
			Q().then(page.handleRoute).then(function (handleRouteResult) {

				page.setStatus(handleRouteResult.code);

				page.setHasDocument(handleRouteResult.hasDocument);

				page.setJsBelowTheFold(DebugUtil.getJsBelowTheFold() || handleRouteResult.jsBelowTheFold);
				page.setSplitJsLoad(DebugUtil.getSplitJsLoad() || handleRouteResult.splitJsLoad);

				// TODO: I think that 3xx/4xx/5xx shouldn't be considered "errors" in navigateDone, but that's
				// how the code is structured right now, and I'm changing too many things at once at the moment. -sra.
				if (handleRouteResult.code && (handleRouteResult.code / 100 | 0) !== 2) {
					_this3.emit("navigateDone", { status: handleRouteResult.code, redirectUrl: handleRouteResult.location }, page, request.getUrl(), type);
					return;
				}
				if (handleRouteResult.page) {
					// in this case, we should forward to a new page *without* changing the URL. Since we are already
					// in an async callback, we should schedule a new handlePage with the new page constructor and return
					// from this call.
					setTimeout(function () {
						return _this3.handlePage(handleRouteResult.page, request, type);
					}, 0);
					return;
				}

				_this3.emit('navigateDone', null, page, request.getUrl(), type);
			}).catch(function (err) {
				logger.error("Error while handling route", err);

				_this3.emit('navigateDone', { status: 500 }, page, request.getUrl(), type);
			});
		}

		/**
   * recursively adds the middleware in the pages array to array.
   */

	}, {
		key: '_addPageMiddlewareToArray',
		value: function _addPageMiddlewareToArray(pages, array) {
			var _this4 = this;

			if (!pages) return;
			pages.forEach(function (page) {
				if (page.middleware) {
					_this4._addPageMiddlewareToArray(page.middleware(), array);
				}
				array.push(page);
			});
		}
	}, {
		key: 'getState',
		value: function getState() {
			return {
				loading: this._loading,
				route: this._currentRoute
			};
		}
	}, {
		key: 'getCurrentRoute',
		value: function getCurrentRoute() {
			return this._currentRoute;
		}
	}, {
		key: 'getLoading',
		value: function getLoading() {
			return this._loading;
		}
	}, {
		key: 'startRoute',
		value: function startRoute(route, request, type) {

			// If we're being called with a requested route, we'll need to
			// tell the caller when they can proceed with their
			// navigation.
			var dfd, promise;

			// We need to handle the case where routes are requested while
			// we're handling the previous navigation.  This can happen if
			// the user furiously clicks the browser's forward/back
			// navigation buttons.
			//
			// We don't want a _queue_ here, because we're only ultimately
			// going to show the user the _final_ route that's requested,
			// so we'll just keep a single reference to the next route we
			// need to actually render once our current navigation is
			// complete.
			//
			if (request) {

				// We don't want to leave navigation detritus
				// laying around as we discard bypassed pages.
				if (this._nextRoute) this._nextRoute.dfd.reject();

				dfd = Q.defer(), promise = dfd.promise;

				this._nextRoute = { route: route, request: request, type: type, dfd: dfd };
			}

			// If we're _currently_ navigating, we'll wait to start the
			// next route until this navigation is complete.  Interleaved
			// navigation causes all kinds of havoc.
			if (!this._loading && this._nextRoute) {
				var _nextRoute = this._nextRoute,
				    _route = _nextRoute.route,
				    _request = _nextRoute.request,
				    _type = _nextRoute.type,
				    _dfd = _nextRoute.dfd;


				this._loading = true;
				this._currentRoute = _route;
				this._nextRoute = null;

				this.emit('navigateStart', { route: _route, request: _request, type: _type });

				// This allows the actual navigation to
				// proceed.
				_dfd.resolve();
			}

			return promise;
		}
	}, {
		key: 'finishRoute',
		value: function finishRoute() {
			this._loading = false;

			this.emit('loadComplete');

			// If other routes were queued while we were navigating, we'll
			// start the next one right off.
			//
			this.startRoute();
		}
	}]);

	return Navigator;
}(EventEmitter);

module.exports = Navigator;
//# sourceMappingURL=data:application/json;charset=utf8;base64,
