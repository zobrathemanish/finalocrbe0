"use strict";

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _RequestLocalStorage = require("./RequestLocalStorage");

var _RequestLocalStorage2 = _interopRequireDefault(_RequestLocalStorage);

var _forEach = require("lodash/forEach");

var _forEach2 = _interopRequireDefault(_forEach);

var _map = require("lodash/map");

var _map2 = _interopRequireDefault(_map);

var _assign = require("lodash/assign");

var _assign2 = _interopRequireDefault(_assign);

var _pick = require("lodash/pick");

var _pick2 = _interopRequireDefault(_pick);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var RLS = _RequestLocalStorage2.default.getNamespace();

// This module provides methods that expose values from the query string.
//
// So, for example, if you pass `?_debug_render_timeout=1000` then you can
// call `DebugUtil.getRenderTimeout()` and receive `1000`.
//
// Additionally you may call `DebugUtil.getAllDebugValues()` to obtain an
// object with all debug parameters extracted from the query string.
//
var DEBUG_PARAMS = {
	getRenderTimeout: "_debug_render_timeout",
	getOutputLogs: "_debug_output_logs",
	getLab: "_debug_lab",
	getJsBelowTheFold: "_debug_js_below_the_fold",
	getSplitJsLoad: "_debug_split_js_load",
	getLogLevel: "_react_server_log_level",
	getLogLevelMain: "_react_server_log_level_main",
	getLogLevelTime: "_react_server_log_level_time",
	getLogLevelGauge: "_react_server_log_level_gauge"
};

var DebugUtil = {
	setRequest: function setRequest(req) {
		(0, _assign2.default)(RLS(), (0, _pick2.default)(req.getQuery(), (0, _map2.default)(DEBUG_PARAMS, function (v) {
			return v;
		})));
	},
	getAllDebugValues: function getAllDebugValues() {
		return (0, _assign2.default)({}, RLS());
	}
};

// Make the methods.
(0, _forEach2.default)(DEBUG_PARAMS, function (param, method) {
	return DebugUtil[method] = function () {
		return RLS()[param];
	};
});

exports.default = DebugUtil;
module.exports = exports["default"];
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInV0aWwvRGVidWdVdGlsLmpzIl0sIm5hbWVzIjpbIlJMUyIsImdldE5hbWVzcGFjZSIsIkRFQlVHX1BBUkFNUyIsImdldFJlbmRlclRpbWVvdXQiLCJnZXRPdXRwdXRMb2dzIiwiZ2V0TGFiIiwiZ2V0SnNCZWxvd1RoZUZvbGQiLCJnZXRTcGxpdEpzTG9hZCIsImdldExvZ0xldmVsIiwiZ2V0TG9nTGV2ZWxNYWluIiwiZ2V0TG9nTGV2ZWxUaW1lIiwiZ2V0TG9nTGV2ZWxHYXVnZSIsIkRlYnVnVXRpbCIsInNldFJlcXVlc3QiLCJyZXEiLCJnZXRRdWVyeSIsInYiLCJnZXRBbGxEZWJ1Z1ZhbHVlcyIsInBhcmFtIiwibWV0aG9kIl0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7Ozs7QUFFQSxJQUFNQSxNQUFNLDhCQUFvQkMsWUFBcEIsRUFBWjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBTUMsZUFBZTtBQUNwQkMsbUJBQW1CLHVCQURDO0FBRXBCQyxnQkFBbUIsb0JBRkM7QUFHcEJDLFNBQW1CLFlBSEM7QUFJcEJDLG9CQUFtQiwwQkFKQztBQUtwQkMsaUJBQW1CLHNCQUxDO0FBTXBCQyxjQUFtQix5QkFOQztBQU9wQkMsa0JBQW1CLDhCQVBDO0FBUXBCQyxrQkFBbUIsOEJBUkM7QUFTcEJDLG1CQUFtQjtBQVRDLENBQXJCOztBQVlBLElBQU1DLFlBQVk7QUFDakJDLFdBRGlCLHNCQUNOQyxHQURNLEVBQ0Q7QUFDZix3QkFBT2QsS0FBUCxFQUFjLG9CQUFLYyxJQUFJQyxRQUFKLEVBQUwsRUFBcUIsbUJBQUliLFlBQUosRUFBa0I7QUFBQSxVQUFLYyxDQUFMO0FBQUEsR0FBbEIsQ0FBckIsQ0FBZDtBQUNBLEVBSGdCO0FBSWpCQyxrQkFKaUIsK0JBSUc7QUFDbkIsU0FBTyxzQkFBTyxFQUFQLEVBQVdqQixLQUFYLENBQVA7QUFDQTtBQU5nQixDQUFsQjs7QUFTQTtBQUNBLHVCQUFRRSxZQUFSLEVBQXNCLFVBQUNnQixLQUFELEVBQVFDLE1BQVI7QUFBQSxRQUFtQlAsVUFBVU8sTUFBVixJQUFvQjtBQUFBLFNBQU1uQixNQUFNa0IsS0FBTixDQUFOO0FBQUEsRUFBdkM7QUFBQSxDQUF0Qjs7a0JBRWVOLFMiLCJmaWxlIjoidXRpbC9EZWJ1Z1V0aWwuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVxdWVzdExvY2FsU3RvcmFnZSBmcm9tIFwiLi9SZXF1ZXN0TG9jYWxTdG9yYWdlXCI7XG5pbXBvcnQgZm9yRWFjaCBmcm9tIFwibG9kYXNoL2ZvckVhY2hcIjtcbmltcG9ydCBtYXAgZnJvbSBcImxvZGFzaC9tYXBcIjtcbmltcG9ydCBhc3NpZ24gZnJvbSBcImxvZGFzaC9hc3NpZ25cIjtcbmltcG9ydCBwaWNrIGZyb20gXCJsb2Rhc2gvcGlja1wiO1xuXG5jb25zdCBSTFMgPSBSZXF1ZXN0TG9jYWxTdG9yYWdlLmdldE5hbWVzcGFjZSgpO1xuXG4vLyBUaGlzIG1vZHVsZSBwcm92aWRlcyBtZXRob2RzIHRoYXQgZXhwb3NlIHZhbHVlcyBmcm9tIHRoZSBxdWVyeSBzdHJpbmcuXG4vL1xuLy8gU28sIGZvciBleGFtcGxlLCBpZiB5b3UgcGFzcyBgP19kZWJ1Z19yZW5kZXJfdGltZW91dD0xMDAwYCB0aGVuIHlvdSBjYW5cbi8vIGNhbGwgYERlYnVnVXRpbC5nZXRSZW5kZXJUaW1lb3V0KClgIGFuZCByZWNlaXZlIGAxMDAwYC5cbi8vXG4vLyBBZGRpdGlvbmFsbHkgeW91IG1heSBjYWxsIGBEZWJ1Z1V0aWwuZ2V0QWxsRGVidWdWYWx1ZXMoKWAgdG8gb2J0YWluIGFuXG4vLyBvYmplY3Qgd2l0aCBhbGwgZGVidWcgcGFyYW1ldGVycyBleHRyYWN0ZWQgZnJvbSB0aGUgcXVlcnkgc3RyaW5nLlxuLy9cbmNvbnN0IERFQlVHX1BBUkFNUyA9IHtcblx0Z2V0UmVuZGVyVGltZW91dCA6IFwiX2RlYnVnX3JlbmRlcl90aW1lb3V0XCIsXG5cdGdldE91dHB1dExvZ3MgICAgOiBcIl9kZWJ1Z19vdXRwdXRfbG9nc1wiLFxuXHRnZXRMYWIgICAgICAgICAgIDogXCJfZGVidWdfbGFiXCIsXG5cdGdldEpzQmVsb3dUaGVGb2xkOiBcIl9kZWJ1Z19qc19iZWxvd190aGVfZm9sZFwiLFxuXHRnZXRTcGxpdEpzTG9hZCAgIDogXCJfZGVidWdfc3BsaXRfanNfbG9hZFwiLFxuXHRnZXRMb2dMZXZlbCAgICAgIDogXCJfcmVhY3Rfc2VydmVyX2xvZ19sZXZlbFwiLFxuXHRnZXRMb2dMZXZlbE1haW4gIDogXCJfcmVhY3Rfc2VydmVyX2xvZ19sZXZlbF9tYWluXCIsXG5cdGdldExvZ0xldmVsVGltZSAgOiBcIl9yZWFjdF9zZXJ2ZXJfbG9nX2xldmVsX3RpbWVcIixcblx0Z2V0TG9nTGV2ZWxHYXVnZSA6IFwiX3JlYWN0X3NlcnZlcl9sb2dfbGV2ZWxfZ2F1Z2VcIixcbn07XG5cbmNvbnN0IERlYnVnVXRpbCA9IHtcblx0c2V0UmVxdWVzdChyZXEpIHtcblx0XHRhc3NpZ24oUkxTKCksIHBpY2socmVxLmdldFF1ZXJ5KCksIG1hcChERUJVR19QQVJBTVMsIHYgPT4gdikpKTtcblx0fSxcblx0Z2V0QWxsRGVidWdWYWx1ZXMoKSB7XG5cdFx0cmV0dXJuIGFzc2lnbih7fSwgUkxTKCkpO1xuXHR9LFxufTtcblxuLy8gTWFrZSB0aGUgbWV0aG9kcy5cbmZvckVhY2goREVCVUdfUEFSQU1TLCAocGFyYW0sIG1ldGhvZCkgPT4gRGVidWdVdGlsW21ldGhvZF0gPSAoKSA9PiBSTFMoKVtwYXJhbV0pO1xuXG5leHBvcnQgZGVmYXVsdCBEZWJ1Z1V0aWw7XG4iXX0=
