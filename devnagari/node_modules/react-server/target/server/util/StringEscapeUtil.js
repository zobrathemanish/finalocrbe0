'use strict';

// see comment on escapeForScriptTag about how these are used
var UNSAFE_CHARS = /[<>\/]/g;
var REPLACEMENT_CHARS = {
	'<': '\\u003C',
	'>': '\\u003E',
	'/': '\\u002F'
};

module.exports = {

	/**
  * Escapes a string in a manner suitable for including in a <script> tag.
  * (It replaces '<', '>', '/' with their unicode equivalents, effectively
  * hiding any erroneous "</script>" tags written out in JS strings from
  * the HTML parser.
  *
  * Idea borrowed from Yahoo's express-state, but our use case is simpler:
  * https://github.com/yahoo/express-state
  */
	escapeForScriptTag: function escapeForScriptTag(str) {
		if (!str) {
			return str;
		}

		return str.replace(UNSAFE_CHARS, function (match) {
			return REPLACEMENT_CHARS[match];
		});
	}
};
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInV0aWwvU3RyaW5nRXNjYXBlVXRpbC5qcyJdLCJuYW1lcyI6WyJVTlNBRkVfQ0hBUlMiLCJSRVBMQUNFTUVOVF9DSEFSUyIsIm1vZHVsZSIsImV4cG9ydHMiLCJlc2NhcGVGb3JTY3JpcHRUYWciLCJzdHIiLCJyZXBsYWNlIiwibWF0Y2giXSwibWFwcGluZ3MiOiI7O0FBQ0E7QUFDQSxJQUFJQSxlQUFlLFNBQW5CO0FBQ0EsSUFBSUMsb0JBQW9CO0FBQ3ZCLE1BQU0sU0FEaUI7QUFFdkIsTUFBTSxTQUZpQjtBQUd2QixNQUFNO0FBSGlCLENBQXhCOztBQU1BQyxPQUFPQyxPQUFQLEdBQWlCOztBQUVoQjs7Ozs7Ozs7O0FBU0FDLG1CQVhnQiw4QkFXSUMsR0FYSixFQVdTO0FBQ3hCLE1BQUksQ0FBQ0EsR0FBTCxFQUFVO0FBQ1QsVUFBT0EsR0FBUDtBQUNBOztBQUVELFNBQU9BLElBQUlDLE9BQUosQ0FBWU4sWUFBWixFQUEwQixVQUFVTyxLQUFWLEVBQWlCO0FBQ2pELFVBQU9OLGtCQUFrQk0sS0FBbEIsQ0FBUDtBQUNBLEdBRk0sQ0FBUDtBQUdBO0FBbkJlLENBQWpCIiwiZmlsZSI6InV0aWwvU3RyaW5nRXNjYXBlVXRpbC5qcyIsInNvdXJjZXNDb250ZW50IjpbIlxuLy8gc2VlIGNvbW1lbnQgb24gZXNjYXBlRm9yU2NyaXB0VGFnIGFib3V0IGhvdyB0aGVzZSBhcmUgdXNlZFxudmFyIFVOU0FGRV9DSEFSUyA9IC9bPD5cXC9dL2c7XG52YXIgUkVQTEFDRU1FTlRfQ0hBUlMgPSB7XG5cdCc8JyA6ICdcXFxcdTAwM0MnLFxuXHQnPicgOiAnXFxcXHUwMDNFJyxcblx0Jy8nIDogJ1xcXFx1MDAyRicsXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcblxuXHQvKipcblx0ICogRXNjYXBlcyBhIHN0cmluZyBpbiBhIG1hbm5lciBzdWl0YWJsZSBmb3IgaW5jbHVkaW5nIGluIGEgPHNjcmlwdD4gdGFnLlxuXHQgKiAoSXQgcmVwbGFjZXMgJzwnLCAnPicsICcvJyB3aXRoIHRoZWlyIHVuaWNvZGUgZXF1aXZhbGVudHMsIGVmZmVjdGl2ZWx5XG5cdCAqIGhpZGluZyBhbnkgZXJyb25lb3VzIFwiPC9zY3JpcHQ+XCIgdGFncyB3cml0dGVuIG91dCBpbiBKUyBzdHJpbmdzIGZyb21cblx0ICogdGhlIEhUTUwgcGFyc2VyLlxuXHQgKlxuXHQgKiBJZGVhIGJvcnJvd2VkIGZyb20gWWFob28ncyBleHByZXNzLXN0YXRlLCBidXQgb3VyIHVzZSBjYXNlIGlzIHNpbXBsZXI6XG5cdCAqIGh0dHBzOi8vZ2l0aHViLmNvbS95YWhvby9leHByZXNzLXN0YXRlXG5cdCAqL1xuXHRlc2NhcGVGb3JTY3JpcHRUYWcgKHN0cikge1xuXHRcdGlmICghc3RyKSB7XG5cdFx0XHRyZXR1cm4gc3RyO1xuXHRcdH1cblxuXHRcdHJldHVybiBzdHIucmVwbGFjZShVTlNBRkVfQ0hBUlMsIGZ1bmN0aW9uIChtYXRjaCkge1xuXHRcdFx0cmV0dXJuIFJFUExBQ0VNRU5UX0NIQVJTW21hdGNoXTtcblx0XHR9KTtcblx0fSxcblxuXG59XG4iXX0=
