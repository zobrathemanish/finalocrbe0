"use strict";

/**
 * Thin wrapper around the environment-specific configuration file
 */

var config = null;

if (true) {

	module.exports = function () {
		// only read out the config once, and then cache it. -sra.
		if (null === config) {

			//eslint-disable-next-line no-process-env
			if (process.env.REACT_SERVER_CONFIGS) {
				var path = require('path');
				//eslint-disable-next-line no-process-env
				var configFilePath = process.env.REACT_SERVER_CONFIGS;

				// Node.js tries to load `config.js` file first. If `config.js` doesn't exist, Node.js
				// then try to load `config.json`.
				//
				// If `configFilePath` is absolute `require.resolve` will
				// reset to it, correctly overriding `process.cwd()`.  If it
				// is relative, then it will be relative to `process.cwd()`.
				//
				configFilePath = path.resolve(process.cwd(), configFilePath, "config");
				config = Object.freeze(require(configFilePath));
			} else {
				config = Object.freeze({});
			}
		}
		return config;
	};
} else {

	// I'm not entirely clear why this code is here; it seems to just copy all the key & values from inputEnv;
	// I'm not clear why the client wouldn't just use inputEnv.
	var env = {

		rehydrate: function rehydrate(inputEnv) {
			Object.keys(inputEnv).forEach(function (key) {
				env[key] = inputEnv[key];
			});

			// janky: remove the 'rehydrate' method from
			// the environment module after it's used
			delete env.rehydrate;
		}
	};

	module.exports = function () {
		return env;
	};
}
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbmZpZy5qcyJdLCJuYW1lcyI6WyJjb25maWciLCJtb2R1bGUiLCJleHBvcnRzIiwicHJvY2VzcyIsImVudiIsIlJFQUNUX1NFUlZFUl9DT05GSUdTIiwicGF0aCIsInJlcXVpcmUiLCJjb25maWdGaWxlUGF0aCIsInJlc29sdmUiLCJjd2QiLCJPYmplY3QiLCJmcmVlemUiLCJyZWh5ZHJhdGUiLCJpbnB1dEVudiIsImtleXMiLCJmb3JFYWNoIiwia2V5Il0sIm1hcHBpbmdzIjoiOztBQUFBOzs7O0FBSUEsSUFBSUEsU0FBUyxJQUFiOztBQUVBLElBQUksSUFBSixFQUFVOztBQUVUQyxRQUFPQyxPQUFQLEdBQWlCLFlBQVk7QUFDNUI7QUFDQSxNQUFJLFNBQVNGLE1BQWIsRUFBcUI7O0FBRXBCO0FBQ0EsT0FBSUcsUUFBUUMsR0FBUixDQUFZQyxvQkFBaEIsRUFBc0M7QUFDckMsUUFBSUMsT0FBT0MsUUFBUSxNQUFSLENBQVg7QUFDQTtBQUNBLFFBQUlDLGlCQUFpQkwsUUFBUUMsR0FBUixDQUFZQyxvQkFBakM7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQUcscUJBQWlCRixLQUFLRyxPQUFMLENBQWFOLFFBQVFPLEdBQVIsRUFBYixFQUE0QkYsY0FBNUIsRUFBNEMsUUFBNUMsQ0FBakI7QUFDQVIsYUFBU1csT0FBT0MsTUFBUCxDQUFjTCxRQUFRQyxjQUFSLENBQWQsQ0FBVDtBQUNBLElBZEQsTUFjTztBQUNOUixhQUFTVyxPQUFPQyxNQUFQLENBQWMsRUFBZCxDQUFUO0FBQ0E7QUFDRDtBQUNELFNBQU9aLE1BQVA7QUFDQSxFQXhCRDtBQTBCQSxDQTVCRCxNQTRCTzs7QUFFTjtBQUNBO0FBQ0EsS0FBSUksTUFBTTs7QUFFVFMsYUFBVyxtQkFBVUMsUUFBVixFQUFvQjtBQUM5QkgsVUFBT0ksSUFBUCxDQUFZRCxRQUFaLEVBQXNCRSxPQUF0QixDQUErQixlQUFPO0FBQ3JDWixRQUFJYSxHQUFKLElBQVdILFNBQVNHLEdBQVQsQ0FBWDtBQUNBLElBRkQ7O0FBSUE7QUFDQTtBQUNBLFVBQU9iLElBQUlTLFNBQVg7QUFDQTtBQVZRLEVBQVY7O0FBYUFaLFFBQU9DLE9BQVAsR0FBaUIsWUFBWTtBQUM1QixTQUFPRSxHQUFQO0FBQ0EsRUFGRDtBQUdBIiwiZmlsZSI6ImNvbmZpZy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogVGhpbiB3cmFwcGVyIGFyb3VuZCB0aGUgZW52aXJvbm1lbnQtc3BlY2lmaWMgY29uZmlndXJhdGlvbiBmaWxlXG4gKi9cblxudmFyIGNvbmZpZyA9IG51bGw7XG5cbmlmICh0cnVlKSB7XG5cblx0bW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoKSB7XG5cdFx0Ly8gb25seSByZWFkIG91dCB0aGUgY29uZmlnIG9uY2UsIGFuZCB0aGVuIGNhY2hlIGl0LiAtc3JhLlxuXHRcdGlmIChudWxsID09PSBjb25maWcpIHtcblxuXHRcdFx0Ly9lc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcHJvY2Vzcy1lbnZcblx0XHRcdGlmIChwcm9jZXNzLmVudi5SRUFDVF9TRVJWRVJfQ09ORklHUykge1xuXHRcdFx0XHR2YXIgcGF0aCA9IHJlcXVpcmUoJ3BhdGgnKTtcblx0XHRcdFx0Ly9lc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcHJvY2Vzcy1lbnZcblx0XHRcdFx0dmFyIGNvbmZpZ0ZpbGVQYXRoID0gcHJvY2Vzcy5lbnYuUkVBQ1RfU0VSVkVSX0NPTkZJR1M7XG5cblx0XHRcdFx0Ly8gTm9kZS5qcyB0cmllcyB0byBsb2FkIGBjb25maWcuanNgIGZpbGUgZmlyc3QuIElmIGBjb25maWcuanNgIGRvZXNuJ3QgZXhpc3QsIE5vZGUuanNcblx0XHRcdFx0Ly8gdGhlbiB0cnkgdG8gbG9hZCBgY29uZmlnLmpzb25gLlxuXHRcdFx0XHQvL1xuXHRcdFx0XHQvLyBJZiBgY29uZmlnRmlsZVBhdGhgIGlzIGFic29sdXRlIGByZXF1aXJlLnJlc29sdmVgIHdpbGxcblx0XHRcdFx0Ly8gcmVzZXQgdG8gaXQsIGNvcnJlY3RseSBvdmVycmlkaW5nIGBwcm9jZXNzLmN3ZCgpYC4gIElmIGl0XG5cdFx0XHRcdC8vIGlzIHJlbGF0aXZlLCB0aGVuIGl0IHdpbGwgYmUgcmVsYXRpdmUgdG8gYHByb2Nlc3MuY3dkKClgLlxuXHRcdFx0XHQvL1xuXHRcdFx0XHRjb25maWdGaWxlUGF0aCA9IHBhdGgucmVzb2x2ZShwcm9jZXNzLmN3ZCgpLCBjb25maWdGaWxlUGF0aCwgXCJjb25maWdcIik7XG5cdFx0XHRcdGNvbmZpZyA9IE9iamVjdC5mcmVlemUocmVxdWlyZShjb25maWdGaWxlUGF0aCkpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0Y29uZmlnID0gT2JqZWN0LmZyZWV6ZSh7fSk7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHJldHVybiBjb25maWc7XG5cdH07XG5cbn0gZWxzZSB7XG5cblx0Ly8gSSdtIG5vdCBlbnRpcmVseSBjbGVhciB3aHkgdGhpcyBjb2RlIGlzIGhlcmU7IGl0IHNlZW1zIHRvIGp1c3QgY29weSBhbGwgdGhlIGtleSAmIHZhbHVlcyBmcm9tIGlucHV0RW52O1xuXHQvLyBJJ20gbm90IGNsZWFyIHdoeSB0aGUgY2xpZW50IHdvdWxkbid0IGp1c3QgdXNlIGlucHV0RW52LlxuXHR2YXIgZW52ID0ge1xuXG5cdFx0cmVoeWRyYXRlOiBmdW5jdGlvbiAoaW5wdXRFbnYpIHtcblx0XHRcdE9iamVjdC5rZXlzKGlucHV0RW52KS5mb3JFYWNoKCBrZXkgPT4ge1xuXHRcdFx0XHRlbnZba2V5XSA9IGlucHV0RW52W2tleV07XG5cdFx0XHR9KTtcblxuXHRcdFx0Ly8gamFua3k6IHJlbW92ZSB0aGUgJ3JlaHlkcmF0ZScgbWV0aG9kIGZyb21cblx0XHRcdC8vIHRoZSBlbnZpcm9ubWVudCBtb2R1bGUgYWZ0ZXIgaXQncyB1c2VkXG5cdFx0XHRkZWxldGUgZW52LnJlaHlkcmF0ZTtcblx0XHR9LFxuXHR9O1xuXG5cdG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKCkge1xuXHRcdHJldHVybiBlbnY7XG5cdH07XG59XG4iXX0=
