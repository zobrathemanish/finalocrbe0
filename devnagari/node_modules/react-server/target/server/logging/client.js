'use strict';

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

/*
 * This is a shim logging module for use in the browser.
 *
 * Our server-side logging library doesn't work client-side.  This just
 * implements the interface with basic output to `console.log`.
 *
 * TODO: For production use we should mimic the interface with NOOPs.
 *
 */

var common = require('./common');

var _console = ['log', 'error', 'warn', 'debug', 'info'].reduce(function (m, v) {
	// IE9 doesn't even _define_ console unless the dev tools are open.
	// IE9 also needs a real function for `apply` to work.
	m[v] = typeof console === 'undefined' ? function () {} : Function.prototype.bind.call(console[v] || console.log, console);
	return m;
}, {});

var lvl_map = {
	emergency: 'error',
	alert: 'error',
	critical: 'error',
	error: 'error',
	warning: 'warn',
	notice: 'warn',
	debug: 'debug',
	info: 'info'
};
var clog = function clog(lvl) {
	return _console[lvl_map[lvl] || 'log'];
};

// IE9 also doesn't support color.
var monochrome = _typeof(_console.log) == "object";

// We don't chain our transports in the same way as winston client-side, but
// we'll conform more-or-less to winston's interface for the `log` method for
// consistency's sake.  This means passing a function as the fourth argument.
// We'll use a noop.
var noop = function noop() {};

var transportQueue = [];

var transportTimer;

function runTransports() {
	var batch = transportQueue;
	transportQueue = [];
	transportTimer = null;
	for (var i = 0; i < batch.length; i++) {
		var _batch$i = _slicedToArray(batch[i], 4),
		    transport = _batch$i[0],
		    level = _batch$i[1],
		    msg = _batch$i[2],
		    meta = _batch$i[3];

		transport.log(level, msg, meta, noop);
	}
}

function scheduleTransport(tuple) {
	transportQueue.push(tuple);
	if (!transportTimer) {
		transportTimer = setTimeout(runTransports, 0);
	}
}

var makeLogger = function makeLogger(group, opts) {
	var config = common.config[group];

	var logger = {
		opts: opts,
		name: opts.name,
		level: config.baseLevel,
		log: function log(level, msg, meta) {

			if (this.transports.length) {
				this.transports.forEach(function (transport) {
					if (config.levels[level] > config.levels[transport.level]) return;
					scheduleTransport([transport, level, msg, meta]);
				});
			}

			if (config.levels[level] > config.levels[this.level]) return;

			// We want an array of arguments to apply to
			// `console.log` so we don't trail an `undefined` when
			// `meta` isn't passed.
			var args = [msg];
			if (meta !== void 0) args.push(meta);

			clog(level).apply(_console, (monochrome ? [level + ': [' + opts.name + ']'] : ['%c' + level + '%c: [%c' + opts.name + '%c]', 'color: ' + config.colors[level], 'color: black', 'color: ' + opts.color.client, 'color: black']).concat(args));
		},
		transports: [],
		add: function add(transport, opts) {
			this.transports.push(new transport(opts));
		},
		stack: common.stack
	};

	Object.keys(config.levels).forEach(function (level) {
		// note that this has to be an ES-5 style function and cannot be an arrow function
		// because arguments doesn't bind to the arrow function's arguments; it would bind
		// to makeLogger's arguments.
		logger[level] = function (a, b, c) {
			logger.log(level, a, b, c);
		};
	});

	(config.extraTransports || []).forEach(function (transport) {
		return logger.add(transport, opts);
	});

	return logger;
};

var getLogger = common.makeGetLogger(makeLogger);

var setLevel = function setLevel(group, level) {

	// Update level for any future loggers.
	common.config[group].baseLevel = level;

	common.forEachLogger(function (logger, loggerGroup) {
		if (loggerGroup === group) logger.level = level;
	});
};

var addTransport = function addTransport(group, transport) {

	if (!common.config[group].extraTransports) {
		common.config[group].extraTransports = [];
	}

	common.config[group].extraTransports.push(transport);

	common.forEachLogger(function (logger, loggerGroup) {
		if (loggerGroup === group) logger.add(transport, logger.opts);
	});
};

module.exports = { getLogger: getLogger, setLevel: setLevel, addTransport: addTransport };
//# sourceMappingURL=data:application/json;charset=utf8;base64,
